// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "core_tests.gen.h"

struct _MyAllTypes {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  uint8_t* a_byte_array;
  int32_t* a4_byte_array;
  int64_t* a8_byte_array;
  double* a_float_array;
  FlValue* a_list;
  FlValue* a_map;
  MyAnEnum an_enum;
  gchar* a_string;
  FlValue* an_object;
};

G_DEFINE_TYPE(MyAllTypes, my_all_types, G_TYPE_OBJECT)

static void my_all_types_dispose(GObject* object) {
  MyAllTypes* self = MY_ALL_TYPES(object);
  g_clear_pointer(&self->a_byte_array, g_free);
  g_clear_pointer(&self->a4_byte_array, g_free);
  g_clear_pointer(&self->a8_byte_array, g_free);
  g_clear_pointer(&self->a_float_array, g_free);
  g_clear_pointer(&self->a_list, fl_value_unref);
  g_clear_pointer(&self->a_map, fl_value_unref);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  G_OBJECT_CLASS(my_all_types_parent_class)->dispose(object);
}

static void my_all_types_init(MyAllTypes* self) {}

static void my_all_types_class_init(MyAllTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_all_types_dispose;
}

MyAllTypes* my_all_types_new(gboolean a_bool, int64_t an_int, int64_t an_int64,
                             double a_double, const uint8_t* a_byte_array,
                             const int32_t* a4_byte_array,
                             const int64_t* a8_byte_array,
                             const double* a_float_array, FlValue* a_list,
                             FlValue* a_map, MyAnEnum an_enum,
                             const gchar* a_string, FlValue* an_object) {
  MyAllTypes* self =
      MY_ALL_TYPES(g_object_new(my_all_types_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->a_list = g_object_ref(a_list);
  self->a_map = g_object_ref(a_map);
  self->an_enum = an_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = g_object_ref(an_object);
  return self;
}

gboolean my_all_types_get_a_bool(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), FALSE);
  return self->a_bool;
}

int64_t my_all_types_get_an_int(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), 0);
  return self->an_int;
}

int64_t my_all_types_get_an_int64(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), 0);
  return self->an_int64;
}

double my_all_types_get_a_double(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), 0.0);
  return self->a_double;
}

const uint8_t* my_all_types_get_a_byte_array(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a_byte_array;
}

const int32_t* my_all_types_get_a4_byte_array(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a4_byte_array;
}

const int64_t* my_all_types_get_a8_byte_array(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a8_byte_array;
}

const double* my_all_types_get_a_float_array(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a_float_array;
}

FlValue* my_all_types_get_a_list(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a_list;
}

FlValue* my_all_types_get_a_map(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a_map;
}

MyAnEnum my_all_types_get_an_enum(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), static_cast<MyAnEnum>(0));
  return self->an_enum;
}

const gchar* my_all_types_get_a_string(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->a_string;
}

FlValue* my_all_types_get_an_object(MyAllTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_TYPES(self), nullptr);
  return self->an_object;
}

static FlValue* my_all_types_to_list(MyAllTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_double(self->a_double));
  fl_value_append_take(
      values, fl_value_new_uint8_list_from_bytes(self->a_byte_array, 0));
  fl_value_append_take(
      values, fl_value_new_int32_list_from_bytes(self->a4_byte_array, 0));
  fl_value_append_take(
      values, fl_value_new_int64_list_from_bytes(self->a8_byte_array, 0));
  fl_value_append_take(
      values, fl_value_new_float_list_from_bytes(self->a_float_array, 0));
  fl_value_append_take(values, fl_value_ref(self->a_list));
  fl_value_append_take(values, fl_value_ref(self->a_map));
  fl_value_append_take(values, fl_value_new_int(self->an_enum));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  return values;
}

static MyAllTypes* my_all_types_new_from_list(FlValue* values) {
  if (fl_value_get_type(values) != FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 0)) !=
          FL_VALUE_TYPE_BOOL ||
      fl_value_get_type(fl_value_get_list_value(values, 1)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(values, 2)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(values, 3)) !=
          FL_VALUE_TYPE_DOUBLE ||
      fl_value_get_type(fl_value_get_list_value(values, 4)) !=
          FL_VALUE_TYPE_UINT8_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 5)) !=
          FL_VALUE_TYPE_INT32_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 6)) !=
          FL_VALUE_TYPE_INT64_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 7)) !=
          FL_VALUE_TYPE_FLOAT_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 8)) !=
          FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 9)) !=
          FL_VALUE_TYPE_MAP ||
      fl_value_get_type(fl_value_get_list_value(values, 10)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(values, 11)) !=
          FL_VALUE_TYPE_STRING) {
    return nullptr;
  }

  return my_all_types_new(
      fl_value_get_bool(fl_value_get_list_value(values, 0)),
      fl_value_get_int(fl_value_get_list_value(values, 1)),
      fl_value_get_int(fl_value_get_list_value(values, 2)),
      fl_value_get_double(fl_value_get_list_value(values, 3)),
      fl_value_get_uint8_list(fl_value_get_list_value(values, 4)),
      fl_value_get_int32_list(fl_value_get_list_value(values, 5)),
      fl_value_get_int64_list(fl_value_get_list_value(values, 6)),
      fl_value_get_float_list(fl_value_get_list_value(values, 7)),
      fl_value_get_list_value(values, 8), fl_value_get_list_value(values, 9),
      static_cast<MyAnEnum>(
          fl_value_get_int(fl_value_get_list_value(values, 10))),
      fl_value_get_string(fl_value_get_list_value(values, 11)),
      fl_value_get_list_value(values, 12));
}

struct _MyAllNullableTypes {
  GObject parent_instance;

  gboolean a_nullable_bool;
  int64_t a_nullable_int;
  int64_t a_nullable_int64;
  double a_nullable_double;
  uint8_t* a_nullable_byte_array;
  int32_t* a_nullable4_byte_array;
  int64_t* a_nullable8_byte_array;
  double* a_nullable_float_array;
  FlValue* a_nullable_list;
  FlValue* a_nullable_map;
  FlValue* nullable_nested_list;
  FlValue* nullable_map_with_annotations;
  FlValue* nullable_map_with_object;
  MyAnEnum a_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
};

G_DEFINE_TYPE(MyAllNullableTypes, my_all_nullable_types, G_TYPE_OBJECT)

static void my_all_nullable_types_dispose(GObject* object) {
  MyAllNullableTypes* self = MY_ALL_NULLABLE_TYPES(object);
  g_clear_pointer(&self->a_nullable_byte_array, g_free);
  g_clear_pointer(&self->a_nullable4_byte_array, g_free);
  g_clear_pointer(&self->a_nullable8_byte_array, g_free);
  g_clear_pointer(&self->a_nullable_float_array, g_free);
  g_clear_pointer(&self->a_nullable_list, fl_value_unref);
  g_clear_pointer(&self->a_nullable_map, fl_value_unref);
  g_clear_pointer(&self->nullable_nested_list, fl_value_unref);
  g_clear_pointer(&self->nullable_map_with_annotations, fl_value_unref);
  g_clear_pointer(&self->nullable_map_with_object, fl_value_unref);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  G_OBJECT_CLASS(my_all_nullable_types_parent_class)->dispose(object);
}

static void my_all_nullable_types_init(MyAllNullableTypes* self) {}

static void my_all_nullable_types_class_init(MyAllNullableTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_all_nullable_types_dispose;
}

MyAllNullableTypes* my_all_nullable_types_new(
    gboolean a_nullable_bool, int64_t a_nullable_int, int64_t a_nullable_int64,
    double a_nullable_double, const uint8_t* a_nullable_byte_array,
    const int32_t* a_nullable4_byte_array,
    const int64_t* a_nullable8_byte_array, const double* a_nullable_float_array,
    FlValue* a_nullable_list, FlValue* a_nullable_map,
    FlValue* nullable_nested_list, FlValue* nullable_map_with_annotations,
    FlValue* nullable_map_with_object, MyAnEnum a_nullable_enum,
    const gchar* a_nullable_string, FlValue* a_nullable_object) {
  MyAllNullableTypes* self = MY_ALL_NULLABLE_TYPES(
      g_object_new(my_all_nullable_types_get_type(), nullptr));
  self->a_nullable_bool = a_nullable_bool;
  self->a_nullable_int = a_nullable_int;
  self->a_nullable_int64 = a_nullable_int64;
  self->a_nullable_double = a_nullable_double;
  self->a_nullable_list = g_object_ref(a_nullable_list);
  self->a_nullable_map = g_object_ref(a_nullable_map);
  self->nullable_nested_list = g_object_ref(nullable_nested_list);
  self->nullable_map_with_annotations =
      g_object_ref(nullable_map_with_annotations);
  self->nullable_map_with_object = g_object_ref(nullable_map_with_object);
  self->a_nullable_enum = a_nullable_enum;
  self->a_nullable_string = g_strdup(a_nullable_string);
  self->a_nullable_object = g_object_ref(a_nullable_object);
  return self;
}

gboolean my_all_nullable_types_get_a_nullable_bool(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), FALSE);
  return self->a_nullable_bool;
}

int64_t my_all_nullable_types_get_a_nullable_int(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), 0);
  return self->a_nullable_int;
}

int64_t my_all_nullable_types_get_a_nullable_int64(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), 0);
  return self->a_nullable_int64;
}

double my_all_nullable_types_get_a_nullable_double(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), 0.0);
  return self->a_nullable_double;
}

const uint8_t* my_all_nullable_types_get_a_nullable_byte_array(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable_byte_array;
}

const int32_t* my_all_nullable_types_get_a_nullable4_byte_array(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable4_byte_array;
}

const int64_t* my_all_nullable_types_get_a_nullable8_byte_array(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable8_byte_array;
}

const double* my_all_nullable_types_get_a_nullable_float_array(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable_float_array;
}

FlValue* my_all_nullable_types_get_a_nullable_list(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable_list;
}

FlValue* my_all_nullable_types_get_a_nullable_map(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable_map;
}

FlValue* my_all_nullable_types_get_nullable_nested_list(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->nullable_nested_list;
}

FlValue* my_all_nullable_types_get_nullable_map_with_annotations(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->nullable_map_with_annotations;
}

FlValue* my_all_nullable_types_get_nullable_map_with_object(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->nullable_map_with_object;
}

MyAnEnum my_all_nullable_types_get_a_nullable_enum(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self),
                       static_cast<MyAnEnum>(0));
  return self->a_nullable_enum;
}

const gchar* my_all_nullable_types_get_a_nullable_string(
    MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable_string;
}

FlValue* my_all_nullable_types_get_a_nullable_object(MyAllNullableTypes* self) {
  g_return_val_if_fail(MY_IS_ALL_NULLABLE_TYPES(self), nullptr);
  return self->a_nullable_object;
}

static FlValue* my_all_nullable_types_to_list(MyAllNullableTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_nullable_bool));
  fl_value_append_take(values, fl_value_new_int(self->a_nullable_int));
  fl_value_append_take(values, fl_value_new_int(self->a_nullable_int64));
  fl_value_append_take(values, fl_value_new_double(self->a_nullable_double));
  fl_value_append_take(values, fl_value_new_uint8_list_from_bytes(
                                   self->a_nullable_byte_array, 0));
  fl_value_append_take(values, fl_value_new_int32_list_from_bytes(
                                   self->a_nullable4_byte_array, 0));
  fl_value_append_take(values, fl_value_new_int64_list_from_bytes(
                                   self->a_nullable8_byte_array, 0));
  fl_value_append_take(values, fl_value_new_float_list_from_bytes(
                                   self->a_nullable_float_array, 0));
  fl_value_append_take(values, fl_value_ref(self->a_nullable_list));
  fl_value_append_take(values, fl_value_ref(self->a_nullable_map));
  fl_value_append_take(values, fl_value_ref(self->nullable_nested_list));
  fl_value_append_take(values,
                       fl_value_ref(self->nullable_map_with_annotations));
  fl_value_append_take(values, fl_value_ref(self->nullable_map_with_object));
  fl_value_append_take(values, fl_value_new_int(self->a_nullable_enum));
  fl_value_append_take(values, fl_value_new_string(self->a_nullable_string));
  fl_value_append_take(values, fl_value_ref(self->a_nullable_object));
  return values;
}

static MyAllNullableTypes* my_all_nullable_types_new_from_list(
    FlValue* values) {
  if (fl_value_get_type(values) != FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 0)) !=
          FL_VALUE_TYPE_BOOL ||
      fl_value_get_type(fl_value_get_list_value(values, 1)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(values, 2)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(values, 3)) !=
          FL_VALUE_TYPE_DOUBLE ||
      fl_value_get_type(fl_value_get_list_value(values, 4)) !=
          FL_VALUE_TYPE_UINT8_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 5)) !=
          FL_VALUE_TYPE_INT32_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 6)) !=
          FL_VALUE_TYPE_INT64_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 7)) !=
          FL_VALUE_TYPE_FLOAT_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 8)) !=
          FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 9)) !=
          FL_VALUE_TYPE_MAP ||
      fl_value_get_type(fl_value_get_list_value(values, 10)) !=
          FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 11)) !=
          FL_VALUE_TYPE_MAP ||
      fl_value_get_type(fl_value_get_list_value(values, 12)) !=
          FL_VALUE_TYPE_MAP ||
      fl_value_get_type(fl_value_get_list_value(values, 13)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(values, 14)) !=
          FL_VALUE_TYPE_STRING) {
    return nullptr;
  }

  return my_all_nullable_types_new(
      fl_value_get_bool(fl_value_get_list_value(values, 0)),
      fl_value_get_int(fl_value_get_list_value(values, 1)),
      fl_value_get_int(fl_value_get_list_value(values, 2)),
      fl_value_get_double(fl_value_get_list_value(values, 3)),
      fl_value_get_uint8_list(fl_value_get_list_value(values, 4)),
      fl_value_get_int32_list(fl_value_get_list_value(values, 5)),
      fl_value_get_int64_list(fl_value_get_list_value(values, 6)),
      fl_value_get_float_list(fl_value_get_list_value(values, 7)),
      fl_value_get_list_value(values, 8), fl_value_get_list_value(values, 9),
      fl_value_get_list_value(values, 10), fl_value_get_list_value(values, 11),
      fl_value_get_list_value(values, 12),
      static_cast<MyAnEnum>(
          fl_value_get_int(fl_value_get_list_value(values, 13))),
      fl_value_get_string(fl_value_get_list_value(values, 14)),
      fl_value_get_list_value(values, 15));
}

struct _MyAllClassesWrapper {
  GObject parent_instance;

  MyAllNullableTypes* all_nullable_types;
  MyAllTypes* all_types;
};

G_DEFINE_TYPE(MyAllClassesWrapper, my_all_classes_wrapper, G_TYPE_OBJECT)

static void my_all_classes_wrapper_dispose(GObject* object) {
  MyAllClassesWrapper* self = MY_ALL_CLASSES_WRAPPER(object);
  g_clear_object(&self->all_nullable_types);
  g_clear_object(&self->all_types);
  G_OBJECT_CLASS(my_all_classes_wrapper_parent_class)->dispose(object);
}

static void my_all_classes_wrapper_init(MyAllClassesWrapper* self) {}

static void my_all_classes_wrapper_class_init(MyAllClassesWrapperClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_all_classes_wrapper_dispose;
}

MyAllClassesWrapper* my_all_classes_wrapper_new(
    MyAllNullableTypes* all_nullable_types, MyAllTypes* all_types) {
  MyAllClassesWrapper* self = MY_ALL_CLASSES_WRAPPER(
      g_object_new(my_all_classes_wrapper_get_type(), nullptr));
  self->all_nullable_types = g_object_ref(all_nullable_types);
  self->all_types = g_object_ref(all_types);
  return self;
}

MyAllNullableTypes* my_all_classes_wrapper_get_all_nullable_types(
    MyAllClassesWrapper* self) {
  g_return_val_if_fail(MY_IS_ALL_CLASSES_WRAPPER(self), nullptr);
  return self->all_nullable_types;
}

MyAllTypes* my_all_classes_wrapper_get_all_types(MyAllClassesWrapper* self) {
  g_return_val_if_fail(MY_IS_ALL_CLASSES_WRAPPER(self), nullptr);
  return self->all_types;
}

static FlValue* my_all_classes_wrapper_to_list(MyAllClassesWrapper* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_custom_object(
                                   0, G_OBJECT(self->all_nullable_types)));
  fl_value_append_take(
      values, fl_value_new_custom_object(0, G_OBJECT(self->all_types)));
  return values;
}

static MyAllClassesWrapper* my_all_classes_wrapper_new_from_list(
    FlValue* values) {
  if (fl_value_get_type(values) != FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 0)) !=
          FL_VALUE_TYPE_CUSTOM ||
      fl_value_get_type(fl_value_get_list_value(values, 1)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return nullptr;
  }

  return my_all_classes_wrapper_new(
      MY_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(fl_value_get_list_value(values, 0))),
      MY_ALL_TYPES(fl_value_get_custom_value_object(
          fl_value_get_list_value(values, 1))));
}

struct _MyTestMessage {
  GObject parent_instance;

  FlValue* test_list;
};

G_DEFINE_TYPE(MyTestMessage, my_test_message, G_TYPE_OBJECT)

static void my_test_message_dispose(GObject* object) {
  MyTestMessage* self = MY_TEST_MESSAGE(object);
  g_clear_pointer(&self->test_list, fl_value_unref);
  G_OBJECT_CLASS(my_test_message_parent_class)->dispose(object);
}

static void my_test_message_init(MyTestMessage* self) {}

static void my_test_message_class_init(MyTestMessageClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_test_message_dispose;
}

MyTestMessage* my_test_message_new(FlValue* test_list) {
  MyTestMessage* self =
      MY_TEST_MESSAGE(g_object_new(my_test_message_get_type(), nullptr));
  self->test_list = g_object_ref(test_list);
  return self;
}

FlValue* my_test_message_get_test_list(MyTestMessage* self) {
  g_return_val_if_fail(MY_IS_TEST_MESSAGE(self), nullptr);
  return self->test_list;
}

static FlValue* my_test_message_to_list(MyTestMessage* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_ref(self->test_list));
  return values;
}

static MyTestMessage* my_test_message_new_from_list(FlValue* values) {
  if (fl_value_get_type(values) != FL_VALUE_TYPE_LIST ||
      fl_value_get_type(fl_value_get_list_value(values, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return nullptr;
  }

  return my_test_message_new(fl_value_get_list_value(values, 0));
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiCodec,
                     my_host_integration_core_api_codec, MY,
                     HOST_INTEGRATION_CORE_API_CODEC, FlStandardMessageCodec)

struct _MyHostIntegrationCoreApiCodec {
  FlStandardMessageCodec parent_instance;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCodec, my_host_integration_core_api_codec,
              fl_standard_message_codec_get_type())

static gboolean write_my_all_classes_wrapper(FlStandardMessageCodec* codec,
                                             GByteArray* buffer,
                                             MyAllClassesWrapper* value,
                                             GError** error) {
  uint8_t type = 128;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = my_all_classes_wrapper_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean write_my_all_nullable_types(FlStandardMessageCodec* codec,
                                            GByteArray* buffer,
                                            MyAllNullableTypes* value,
                                            GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = my_all_nullable_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean write_my_all_types(FlStandardMessageCodec* codec,
                                   GByteArray* buffer, MyAllTypes* value,
                                   GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = my_all_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean write_my_test_message(FlStandardMessageCodec* codec,
                                      GByteArray* buffer, MyTestMessage* value,
                                      GError** error) {
  uint8_t type = 131;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = my_test_message_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean my_host_integration_core_api_write_value(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 128:
        return write_my_all_classes_wrapper(
            codec, buffer,
            MY_ALL_CLASSES_WRAPPER(fl_value_get_custom_value_object(value)),
            error);
      case 129:
        return write_my_all_nullable_types(
            codec, buffer,
            MY_ALL_NULLABLE_TYPES(fl_value_get_custom_value_object(value)),
            error);
      case 130:
        return write_my_all_types(
            codec, buffer,
            MY_ALL_TYPES(fl_value_get_custom_value_object(value)), error);
      case 131:
        return write_my_test_message(
            codec, buffer,
            MY_TEST_MESSAGE(fl_value_get_custom_value_object(value)), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(
             my_host_integration_core_api_codec_parent_class)
      ->write_value(codec, buffer, value, error);
}

static FlValue* read_my_all_classes_wrapper(FlStandardMessageCodec* codec,
                                            GBytes* buffer, size_t* offset,
                                            GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MyAllClassesWrapper) value =
      my_all_classes_wrapper_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object_take(128, G_OBJECT(value));
}

static FlValue* read_my_all_nullable_types(FlStandardMessageCodec* codec,
                                           GBytes* buffer, size_t* offset,
                                           GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MyAllNullableTypes) value =
      my_all_nullable_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object_take(129, G_OBJECT(value));
}

static FlValue* read_my_all_types(FlStandardMessageCodec* codec, GBytes* buffer,
                                  size_t* offset, GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MyAllTypes) value = my_all_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object_take(130, G_OBJECT(value));
}

static FlValue* read_my_test_message(FlStandardMessageCodec* codec,
                                     GBytes* buffer, size_t* offset,
                                     GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(MyTestMessage) value = my_test_message_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object_take(131, G_OBJECT(value));
}

static FlValue* my_host_integration_core_api_read_value_of_type(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type,
    GError** error) {
  switch (type) {
    case 128:
      return read_my_all_classes_wrapper(codec, buffer, offset, error);
    case 129:
      return read_my_all_nullable_types(codec, buffer, offset, error);
    case 130:
      return read_my_all_types(codec, buffer, offset, error);
    case 131:
      return read_my_test_message(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(
                 my_host_integration_core_api_codec_parent_class)
          ->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void my_host_integration_core_api_codec_init(
    MyHostIntegrationCoreApiCodec* self) {}

static void my_host_integration_core_api_codec_class_init(
    MyHostIntegrationCoreApiCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value =
      my_host_integration_core_api_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type =
      my_host_integration_core_api_read_value_of_type;
}

static MyHostIntegrationCoreApiCodec* my_host_integration_core_api_codec_new() {
  MyHostIntegrationCoreApiCodec* self = MY_HOST_INTEGRATION_CORE_API_CODEC(
      g_object_new(my_host_integration_core_api_codec_get_type(), nullptr));
  return self;
}

struct _MyHostIntegrationCoreApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiNoopResponse,
              my_host_integration_core_api_noop_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_noop_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiNoopResponse* self =
      MY_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_noop_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_noop_response_init(
    MyHostIntegrationCoreApiNoopResponse* self) {}

static void my_host_integration_core_api_noop_response_class_init(
    MyHostIntegrationCoreApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_noop_response_dispose;
}

MyHostIntegrationCoreApiNoopResponse*
my_host_integration_core_api_noop_response_new(void return_value) {
  MyHostIntegrationCoreApiNoopResponse* self =
      MY_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          my_host_integration_core_api_noop_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

MyHostIntegrationCoreApiNoopResponse*
my_host_integration_core_api_noop_response_new_error(const gchar* code,
                                                     const gchar* message,
                                                     FlValue* details) {
  MyHostIntegrationCoreApiNoopResponse* self =
      MY_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          my_host_integration_core_api_noop_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAllTypesResponse,
              my_host_integration_core_api_echo_all_types_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_all_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_all_types_response_init(
    MyHostIntegrationCoreApiEchoAllTypesResponse* self) {}

static void my_host_integration_core_api_echo_all_types_response_class_init(
    MyHostIntegrationCoreApiEchoAllTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_all_types_response_dispose;
}

MyHostIntegrationCoreApiEchoAllTypesResponse*
my_host_integration_core_api_echo_all_types_response_new(
    MyAllTypes* return_value) {
  MyHostIntegrationCoreApiEchoAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_all_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

MyHostIntegrationCoreApiEchoAllTypesResponse*
my_host_integration_core_api_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_all_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiThrowErrorResponse,
              my_host_integration_core_api_throw_error_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_throw_error_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiThrowErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_throw_error_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_throw_error_response_init(
    MyHostIntegrationCoreApiThrowErrorResponse* self) {}

static void my_host_integration_core_api_throw_error_response_class_init(
    MyHostIntegrationCoreApiThrowErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_throw_error_response_dispose;
}

MyHostIntegrationCoreApiThrowErrorResponse*
my_host_integration_core_api_throw_error_response_new(FlValue* return_value) {
  MyHostIntegrationCoreApiThrowErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiThrowErrorResponse*
my_host_integration_core_api_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiThrowErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiThrowErrorFromVoidResponse,
              my_host_integration_core_api_throw_error_from_void_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_throw_error_from_void_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_throw_error_from_void_response_init(
    MyHostIntegrationCoreApiThrowErrorFromVoidResponse* self) {}

static void
my_host_integration_core_api_throw_error_from_void_response_class_init(
    MyHostIntegrationCoreApiThrowErrorFromVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_throw_error_from_void_response_dispose;
}

MyHostIntegrationCoreApiThrowErrorFromVoidResponse*
my_host_integration_core_api_throw_error_from_void_response_new(
    void return_value) {
  MyHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_error_from_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

MyHostIntegrationCoreApiThrowErrorFromVoidResponse*
my_host_integration_core_api_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_error_from_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiThrowFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiThrowFlutterErrorResponse,
              my_host_integration_core_api_throw_flutter_error_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_throw_flutter_error_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_throw_flutter_error_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_throw_flutter_error_response_init(
    MyHostIntegrationCoreApiThrowFlutterErrorResponse* self) {}

static void
my_host_integration_core_api_throw_flutter_error_response_class_init(
    MyHostIntegrationCoreApiThrowFlutterErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_throw_flutter_error_response_dispose;
}

MyHostIntegrationCoreApiThrowFlutterErrorResponse*
my_host_integration_core_api_throw_flutter_error_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_flutter_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiThrowFlutterErrorResponse*
my_host_integration_core_api_throw_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_flutter_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoIntResponse,
              my_host_integration_core_api_echo_int_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_int_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_int_response_init(
    MyHostIntegrationCoreApiEchoIntResponse* self) {}

static void my_host_integration_core_api_echo_int_response_class_init(
    MyHostIntegrationCoreApiEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_int_response_dispose;
}

MyHostIntegrationCoreApiEchoIntResponse*
my_host_integration_core_api_echo_int_response_new(int64_t return_value) {
  MyHostIntegrationCoreApiEchoIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_int_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoIntResponse*
my_host_integration_core_api_echo_int_response_new_error(const gchar* code,
                                                         const gchar* message,
                                                         FlValue* details) {
  MyHostIntegrationCoreApiEchoIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_int_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoDoubleResponse,
              my_host_integration_core_api_echo_double_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_double_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_double_response_init(
    MyHostIntegrationCoreApiEchoDoubleResponse* self) {}

static void my_host_integration_core_api_echo_double_response_class_init(
    MyHostIntegrationCoreApiEchoDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_double_response_dispose;
}

MyHostIntegrationCoreApiEchoDoubleResponse*
my_host_integration_core_api_echo_double_response_new(double return_value) {
  MyHostIntegrationCoreApiEchoDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoDoubleResponse*
my_host_integration_core_api_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoBoolResponse,
              my_host_integration_core_api_echo_bool_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_bool_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_bool_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_bool_response_init(
    MyHostIntegrationCoreApiEchoBoolResponse* self) {}

static void my_host_integration_core_api_echo_bool_response_class_init(
    MyHostIntegrationCoreApiEchoBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_bool_response_dispose;
}

MyHostIntegrationCoreApiEchoBoolResponse*
my_host_integration_core_api_echo_bool_response_new(gboolean return_value) {
  MyHostIntegrationCoreApiEchoBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_bool_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoBoolResponse*
my_host_integration_core_api_echo_bool_response_new_error(const gchar* code,
                                                          const gchar* message,
                                                          FlValue* details) {
  MyHostIntegrationCoreApiEchoBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_bool_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoStringResponse,
              my_host_integration_core_api_echo_string_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_string_response_init(
    MyHostIntegrationCoreApiEchoStringResponse* self) {}

static void my_host_integration_core_api_echo_string_response_class_init(
    MyHostIntegrationCoreApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_string_response_dispose;
}

MyHostIntegrationCoreApiEchoStringResponse*
my_host_integration_core_api_echo_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiEchoStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoStringResponse*
my_host_integration_core_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoUint8ListResponse,
              my_host_integration_core_api_echo_uint8_list_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_uint8_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_uint8_list_response_init(
    MyHostIntegrationCoreApiEchoUint8ListResponse* self) {}

static void my_host_integration_core_api_echo_uint8_list_response_class_init(
    MyHostIntegrationCoreApiEchoUint8ListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_uint8_list_response_dispose;
}

MyHostIntegrationCoreApiEchoUint8ListResponse*
my_host_integration_core_api_echo_uint8_list_response_new(
    const uint8_t* return_value) {
  MyHostIntegrationCoreApiEchoUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_uint8_list_from_bytes(return_value, null));
  return self;
}

MyHostIntegrationCoreApiEchoUint8ListResponse*
my_host_integration_core_api_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoObjectResponse,
              my_host_integration_core_api_echo_object_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_object_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_object_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_object_response_init(
    MyHostIntegrationCoreApiEchoObjectResponse* self) {}

static void my_host_integration_core_api_echo_object_response_class_init(
    MyHostIntegrationCoreApiEchoObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_object_response_dispose;
}

MyHostIntegrationCoreApiEchoObjectResponse*
my_host_integration_core_api_echo_object_response_new(FlValue* return_value) {
  MyHostIntegrationCoreApiEchoObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoObjectResponse*
my_host_integration_core_api_echo_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoListResponse,
              my_host_integration_core_api_echo_list_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_list_response_init(
    MyHostIntegrationCoreApiEchoListResponse* self) {}

static void my_host_integration_core_api_echo_list_response_class_init(
    MyHostIntegrationCoreApiEchoListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_list_response_dispose;
}

MyHostIntegrationCoreApiEchoListResponse*
my_host_integration_core_api_echo_list_response_new(FlValue* return_value) {
  MyHostIntegrationCoreApiEchoListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_list_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoListResponse*
my_host_integration_core_api_echo_list_response_new_error(const gchar* code,
                                                          const gchar* message,
                                                          FlValue* details) {
  MyHostIntegrationCoreApiEchoListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_list_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoMapResponse,
              my_host_integration_core_api_echo_map_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_map_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_map_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_map_response_init(
    MyHostIntegrationCoreApiEchoMapResponse* self) {}

static void my_host_integration_core_api_echo_map_response_class_init(
    MyHostIntegrationCoreApiEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_map_response_dispose;
}

MyHostIntegrationCoreApiEchoMapResponse*
my_host_integration_core_api_echo_map_response_new(FlValue* return_value) {
  MyHostIntegrationCoreApiEchoMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_map_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoMapResponse*
my_host_integration_core_api_echo_map_response_new_error(const gchar* code,
                                                         const gchar* message,
                                                         FlValue* details) {
  MyHostIntegrationCoreApiEchoMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_map_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoClassWrapperResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoClassWrapperResponse,
              my_host_integration_core_api_echo_class_wrapper_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_class_wrapper_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoClassWrapperResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_class_wrapper_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_class_wrapper_response_init(
    MyHostIntegrationCoreApiEchoClassWrapperResponse* self) {}

static void my_host_integration_core_api_echo_class_wrapper_response_class_init(
    MyHostIntegrationCoreApiEchoClassWrapperResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_class_wrapper_response_dispose;
}

MyHostIntegrationCoreApiEchoClassWrapperResponse*
my_host_integration_core_api_echo_class_wrapper_response_new(
    MyAllClassesWrapper* return_value) {
  MyHostIntegrationCoreApiEchoClassWrapperResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_class_wrapper_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

MyHostIntegrationCoreApiEchoClassWrapperResponse*
my_host_integration_core_api_echo_class_wrapper_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoClassWrapperResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_class_wrapper_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoEnumResponse,
              my_host_integration_core_api_echo_enum_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_enum_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_echo_enum_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_enum_response_init(
    MyHostIntegrationCoreApiEchoEnumResponse* self) {}

static void my_host_integration_core_api_echo_enum_response_class_init(
    MyHostIntegrationCoreApiEchoEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_enum_response_dispose;
}

MyHostIntegrationCoreApiEchoEnumResponse*
my_host_integration_core_api_echo_enum_response_new(MyAnEnum return_value) {
  MyHostIntegrationCoreApiEchoEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_enum_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoEnumResponse*
my_host_integration_core_api_echo_enum_response_new_error(const gchar* code,
                                                          const gchar* message,
                                                          FlValue* details) {
  MyHostIntegrationCoreApiEchoEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_enum_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNamedDefaultStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNamedDefaultStringResponse,
              my_host_integration_core_api_echo_named_default_string_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_named_default_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_named_default_string_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_named_default_string_response_init(
    MyHostIntegrationCoreApiEchoNamedDefaultStringResponse* self) {}

static void
my_host_integration_core_api_echo_named_default_string_response_class_init(
    MyHostIntegrationCoreApiEchoNamedDefaultStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_named_default_string_response_dispose;
}

MyHostIntegrationCoreApiEchoNamedDefaultStringResponse*
my_host_integration_core_api_echo_named_default_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_named_default_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNamedDefaultStringResponse*
my_host_integration_core_api_echo_named_default_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_named_default_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse,
    my_host_integration_core_api_echo_optional_default_double_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_optional_default_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_optional_default_double_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_optional_default_double_response_init(
    MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self) {}

static void
my_host_integration_core_api_echo_optional_default_double_response_class_init(
    MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_optional_default_double_response_dispose;
}

MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
my_host_integration_core_api_echo_optional_default_double_response_new(
    double return_value) {
  MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_optional_default_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
my_host_integration_core_api_echo_optional_default_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_optional_default_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoRequiredIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoRequiredIntResponse,
              my_host_integration_core_api_echo_required_int_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_required_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoRequiredIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_required_int_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_required_int_response_init(
    MyHostIntegrationCoreApiEchoRequiredIntResponse* self) {}

static void my_host_integration_core_api_echo_required_int_response_class_init(
    MyHostIntegrationCoreApiEchoRequiredIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_required_int_response_dispose;
}

MyHostIntegrationCoreApiEchoRequiredIntResponse*
my_host_integration_core_api_echo_required_int_response_new(
    int64_t return_value) {
  MyHostIntegrationCoreApiEchoRequiredIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_required_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoRequiredIntResponse*
my_host_integration_core_api_echo_required_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoRequiredIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_required_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAllNullableTypesResponse,
              my_host_integration_core_api_echo_all_nullable_types_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_all_nullable_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_all_nullable_types_response_init(
    MyHostIntegrationCoreApiEchoAllNullableTypesResponse* self) {}

static void
my_host_integration_core_api_echo_all_nullable_types_response_class_init(
    MyHostIntegrationCoreApiEchoAllNullableTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_all_nullable_types_response_dispose;
}

MyHostIntegrationCoreApiEchoAllNullableTypesResponse*
my_host_integration_core_api_echo_all_nullable_types_response_new(
    MyAllNullableTypes* return_value) {
  MyHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_all_nullable_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

MyHostIntegrationCoreApiEchoAllNullableTypesResponse*
my_host_integration_core_api_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_all_nullable_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiExtractNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiExtractNestedNullableStringResponse,
    my_host_integration_core_api_extract_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_extract_nested_nullable_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_extract_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_extract_nested_nullable_string_response_init(
    MyHostIntegrationCoreApiExtractNestedNullableStringResponse* self) {}

static void
my_host_integration_core_api_extract_nested_nullable_string_response_class_init(
    MyHostIntegrationCoreApiExtractNestedNullableStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_extract_nested_nullable_string_response_dispose;
}

MyHostIntegrationCoreApiExtractNestedNullableStringResponse*
my_host_integration_core_api_extract_nested_nullable_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

MyHostIntegrationCoreApiExtractNestedNullableStringResponse*
my_host_integration_core_api_extract_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiCreateNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCreateNestedNullableStringResponse,
    my_host_integration_core_api_create_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_create_nested_nullable_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_create_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_create_nested_nullable_string_response_init(
    MyHostIntegrationCoreApiCreateNestedNullableStringResponse* self) {}

static void
my_host_integration_core_api_create_nested_nullable_string_response_class_init(
    MyHostIntegrationCoreApiCreateNestedNullableStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_create_nested_nullable_string_response_dispose;
}

MyHostIntegrationCoreApiCreateNestedNullableStringResponse*
my_host_integration_core_api_create_nested_nullable_string_response_new(
    MyAllClassesWrapper* return_value) {
  MyHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_create_nested_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

MyHostIntegrationCoreApiCreateNestedNullableStringResponse*
my_host_integration_core_api_create_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_create_nested_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiSendMultipleNullableTypesResponse,
    my_host_integration_core_api_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_send_multiple_nullable_types_response_init(
    MyHostIntegrationCoreApiSendMultipleNullableTypesResponse* self) {}

static void
my_host_integration_core_api_send_multiple_nullable_types_response_class_init(
    MyHostIntegrationCoreApiSendMultipleNullableTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_send_multiple_nullable_types_response_dispose;
}

MyHostIntegrationCoreApiSendMultipleNullableTypesResponse*
my_host_integration_core_api_send_multiple_nullable_types_response_new(
    MyAllNullableTypes* return_value) {
  MyHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

MyHostIntegrationCoreApiSendMultipleNullableTypesResponse*
my_host_integration_core_api_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableIntResponse,
              my_host_integration_core_api_echo_nullable_int_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_int_response_init(
    MyHostIntegrationCoreApiEchoNullableIntResponse* self) {}

static void my_host_integration_core_api_echo_nullable_int_response_class_init(
    MyHostIntegrationCoreApiEchoNullableIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_int_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableIntResponse*
my_host_integration_core_api_echo_nullable_int_response_new(
    int64_t return_value) {
  MyHostIntegrationCoreApiEchoNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableIntResponse*
my_host_integration_core_api_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableDoubleResponse,
              my_host_integration_core_api_echo_nullable_double_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_double_response_init(
    MyHostIntegrationCoreApiEchoNullableDoubleResponse* self) {}

static void
my_host_integration_core_api_echo_nullable_double_response_class_init(
    MyHostIntegrationCoreApiEchoNullableDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_double_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableDoubleResponse*
my_host_integration_core_api_echo_nullable_double_response_new(
    double return_value) {
  MyHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableDoubleResponse*
my_host_integration_core_api_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableBoolResponse,
              my_host_integration_core_api_echo_nullable_bool_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_bool_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_bool_response_init(
    MyHostIntegrationCoreApiEchoNullableBoolResponse* self) {}

static void my_host_integration_core_api_echo_nullable_bool_response_class_init(
    MyHostIntegrationCoreApiEchoNullableBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_bool_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableBoolResponse*
my_host_integration_core_api_echo_nullable_bool_response_new(
    gboolean return_value) {
  MyHostIntegrationCoreApiEchoNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableBoolResponse*
my_host_integration_core_api_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableStringResponse,
              my_host_integration_core_api_echo_nullable_string_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_string_response_init(
    MyHostIntegrationCoreApiEchoNullableStringResponse* self) {}

static void
my_host_integration_core_api_echo_nullable_string_response_class_init(
    MyHostIntegrationCoreApiEchoNullableStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_string_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableStringResponse*
my_host_integration_core_api_echo_nullable_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiEchoNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableStringResponse*
my_host_integration_core_api_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableUint8ListResponse,
              my_host_integration_core_api_echo_nullable_uint8_list_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_uint8_list_response_init(
    MyHostIntegrationCoreApiEchoNullableUint8ListResponse* self) {}

static void
my_host_integration_core_api_echo_nullable_uint8_list_response_class_init(
    MyHostIntegrationCoreApiEchoNullableUint8ListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_uint8_list_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableUint8ListResponse*
my_host_integration_core_api_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value) {
  MyHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_uint8_list_from_bytes(return_value, null));
  return self;
}

MyHostIntegrationCoreApiEchoNullableUint8ListResponse*
my_host_integration_core_api_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableObjectResponse,
              my_host_integration_core_api_echo_nullable_object_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_object_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_object_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_object_response_init(
    MyHostIntegrationCoreApiEchoNullableObjectResponse* self) {}

static void
my_host_integration_core_api_echo_nullable_object_response_class_init(
    MyHostIntegrationCoreApiEchoNullableObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_object_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableObjectResponse*
my_host_integration_core_api_echo_nullable_object_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoNullableObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableObjectResponse*
my_host_integration_core_api_echo_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableListResponse,
              my_host_integration_core_api_echo_nullable_list_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_list_response_init(
    MyHostIntegrationCoreApiEchoNullableListResponse* self) {}

static void my_host_integration_core_api_echo_nullable_list_response_class_init(
    MyHostIntegrationCoreApiEchoNullableListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_list_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableListResponse*
my_host_integration_core_api_echo_nullable_list_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableListResponse*
my_host_integration_core_api_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableMapResponse,
              my_host_integration_core_api_echo_nullable_map_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_map_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_map_response_init(
    MyHostIntegrationCoreApiEchoNullableMapResponse* self) {}

static void my_host_integration_core_api_echo_nullable_map_response_class_init(
    MyHostIntegrationCoreApiEchoNullableMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_map_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableMapResponse*
my_host_integration_core_api_echo_nullable_map_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableMapResponse*
my_host_integration_core_api_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNullableEnumResponse,
              my_host_integration_core_api_echo_nullable_enum_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_nullable_enum_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_nullable_enum_response_init(
    MyHostIntegrationCoreApiEchoNullableEnumResponse* self) {}

static void my_host_integration_core_api_echo_nullable_enum_response_class_init(
    MyHostIntegrationCoreApiEchoNullableEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_nullable_enum_response_dispose;
}

MyHostIntegrationCoreApiEchoNullableEnumResponse*
my_host_integration_core_api_echo_nullable_enum_response_new(
    MyAnEnum return_value) {
  MyHostIntegrationCoreApiEchoNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNullableEnumResponse*
my_host_integration_core_api_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_nullable_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoOptionalNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoOptionalNullableIntResponse,
              my_host_integration_core_api_echo_optional_nullable_int_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_optional_nullable_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_optional_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_optional_nullable_int_response_init(
    MyHostIntegrationCoreApiEchoOptionalNullableIntResponse* self) {}

static void
my_host_integration_core_api_echo_optional_nullable_int_response_class_init(
    MyHostIntegrationCoreApiEchoOptionalNullableIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_optional_nullable_int_response_dispose;
}

MyHostIntegrationCoreApiEchoOptionalNullableIntResponse*
my_host_integration_core_api_echo_optional_nullable_int_response_new(
    int64_t return_value) {
  MyHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoOptionalNullableIntResponse*
my_host_integration_core_api_echo_optional_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApiEchoNamedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoNamedNullableStringResponse,
              my_host_integration_core_api_echo_named_nullable_string_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_named_nullable_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_named_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_named_nullable_string_response_init(
    MyHostIntegrationCoreApiEchoNamedNullableStringResponse* self) {}

static void
my_host_integration_core_api_echo_named_nullable_string_response_class_init(
    MyHostIntegrationCoreApiEchoNamedNullableStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_named_nullable_string_response_dispose;
}

MyHostIntegrationCoreApiEchoNamedNullableStringResponse*
my_host_integration_core_api_echo_named_nullable_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_named_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

MyHostIntegrationCoreApiEchoNamedNullableStringResponse*
my_host_integration_core_api_echo_named_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_named_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiNoopAsyncResponse,
                     my_host_integration_core_api_noop_async_response, MY,
                     HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiNoopAsyncResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiNoopAsyncResponse,
              my_host_integration_core_api_noop_async_response, G_TYPE_OBJECT)

static void my_host_integration_core_api_noop_async_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiNoopAsyncResponse* self =
      MY_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_integration_core_api_noop_async_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_noop_async_response_init(
    MyHostIntegrationCoreApiNoopAsyncResponse* self) {}

static void my_host_integration_core_api_noop_async_response_class_init(
    MyHostIntegrationCoreApiNoopAsyncResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_noop_async_response_dispose;
}

static MyHostIntegrationCoreApiNoopAsyncResponse*
my_host_integration_core_api_noop_async_response_new(void return_value) {
  MyHostIntegrationCoreApiNoopAsyncResponse* self =
      MY_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(g_object_new(
          my_host_integration_core_api_noop_async_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MyHostIntegrationCoreApiNoopAsyncResponse*
my_host_integration_core_api_noop_async_response_new_error(const gchar* code,
                                                           const gchar* message,
                                                           FlValue* details) {
  MyHostIntegrationCoreApiNoopAsyncResponse* self =
      MY_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(g_object_new(
          my_host_integration_core_api_noop_async_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncIntResponse,
                     my_host_integration_core_api_echo_async_int_response, MY,
                     HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncIntResponse,
              my_host_integration_core_api_echo_async_int_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_int_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_int_response_init(
    MyHostIntegrationCoreApiEchoAsyncIntResponse* self) {}

static void my_host_integration_core_api_echo_async_int_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_int_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncIntResponse*
my_host_integration_core_api_echo_async_int_response_new(int64_t return_value) {
  MyHostIntegrationCoreApiEchoAsyncIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncIntResponse*
my_host_integration_core_api_echo_async_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncDoubleResponse,
                     my_host_integration_core_api_echo_async_double_response,
                     MY, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncDoubleResponse,
              my_host_integration_core_api_echo_async_double_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_double_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_double_response_init(
    MyHostIntegrationCoreApiEchoAsyncDoubleResponse* self) {}

static void my_host_integration_core_api_echo_async_double_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_double_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncDoubleResponse*
my_host_integration_core_api_echo_async_double_response_new(
    double return_value) {
  MyHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncDoubleResponse*
my_host_integration_core_api_echo_async_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncBoolResponse,
                     my_host_integration_core_api_echo_async_bool_response, MY,
                     HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncBoolResponse,
              my_host_integration_core_api_echo_async_bool_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_bool_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_bool_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_bool_response_init(
    MyHostIntegrationCoreApiEchoAsyncBoolResponse* self) {}

static void my_host_integration_core_api_echo_async_bool_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_bool_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncBoolResponse*
my_host_integration_core_api_echo_async_bool_response_new(
    gboolean return_value) {
  MyHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncBoolResponse*
my_host_integration_core_api_echo_async_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncStringResponse,
                     my_host_integration_core_api_echo_async_string_response,
                     MY, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncStringResponse,
              my_host_integration_core_api_echo_async_string_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_string_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_string_response_init(
    MyHostIntegrationCoreApiEchoAsyncStringResponse* self) {}

static void my_host_integration_core_api_echo_async_string_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_string_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncStringResponse*
my_host_integration_core_api_echo_async_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiEchoAsyncStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncStringResponse*
my_host_integration_core_api_echo_async_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    my_host_integration_core_api_echo_async_uint8_list_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncUint8ListResponse,
              my_host_integration_core_api_echo_async_uint8_list_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_uint8_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_uint8_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_uint8_list_response_init(
    MyHostIntegrationCoreApiEchoAsyncUint8ListResponse* self) {}

static void
my_host_integration_core_api_echo_async_uint8_list_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncUint8ListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_uint8_list_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncUint8ListResponse*
my_host_integration_core_api_echo_async_uint8_list_response_new(
    const uint8_t* return_value) {
  MyHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_uint8_list_from_bytes(return_value, null));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncUint8ListResponse*
my_host_integration_core_api_echo_async_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncObjectResponse,
                     my_host_integration_core_api_echo_async_object_response,
                     MY, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncObjectResponse,
              my_host_integration_core_api_echo_async_object_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_object_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_object_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_object_response_init(
    MyHostIntegrationCoreApiEchoAsyncObjectResponse* self) {}

static void my_host_integration_core_api_echo_async_object_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_object_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncObjectResponse*
my_host_integration_core_api_echo_async_object_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncObjectResponse*
my_host_integration_core_api_echo_async_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncListResponse,
                     my_host_integration_core_api_echo_async_list_response, MY,
                     HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncListResponse,
              my_host_integration_core_api_echo_async_list_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_list_response_init(
    MyHostIntegrationCoreApiEchoAsyncListResponse* self) {}

static void my_host_integration_core_api_echo_async_list_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_list_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncListResponse*
my_host_integration_core_api_echo_async_list_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoAsyncListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncListResponse*
my_host_integration_core_api_echo_async_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncMapResponse,
                     my_host_integration_core_api_echo_async_map_response, MY,
                     HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncMapResponse,
              my_host_integration_core_api_echo_async_map_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_map_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_map_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_map_response_init(
    MyHostIntegrationCoreApiEchoAsyncMapResponse* self) {}

static void my_host_integration_core_api_echo_async_map_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_map_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncMapResponse*
my_host_integration_core_api_echo_async_map_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoAsyncMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncMapResponse*
my_host_integration_core_api_echo_async_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncEnumResponse,
                     my_host_integration_core_api_echo_async_enum_response, MY,
                     HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncEnumResponse,
              my_host_integration_core_api_echo_async_enum_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_enum_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_enum_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_enum_response_init(
    MyHostIntegrationCoreApiEchoAsyncEnumResponse* self) {}

static void my_host_integration_core_api_echo_async_enum_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_enum_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncEnumResponse*
my_host_integration_core_api_echo_async_enum_response_new(
    MyAnEnum return_value) {
  MyHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncEnumResponse*
my_host_integration_core_api_echo_async_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiThrowAsyncErrorResponse,
                     my_host_integration_core_api_throw_async_error_response,
                     MY, HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiThrowAsyncErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiThrowAsyncErrorResponse,
              my_host_integration_core_api_throw_async_error_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_throw_async_error_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_throw_async_error_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_throw_async_error_response_init(
    MyHostIntegrationCoreApiThrowAsyncErrorResponse* self) {}

static void my_host_integration_core_api_throw_async_error_response_class_init(
    MyHostIntegrationCoreApiThrowAsyncErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_throw_async_error_response_dispose;
}

static MyHostIntegrationCoreApiThrowAsyncErrorResponse*
my_host_integration_core_api_throw_async_error_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_async_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiThrowAsyncErrorResponse*
my_host_integration_core_api_throw_async_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_async_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    my_host_integration_core_api_throw_async_error_from_void_response, MY,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
              my_host_integration_core_api_throw_async_error_from_void_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_throw_async_error_from_void_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_throw_async_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_throw_async_error_from_void_response_init(
    MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self) {}

static void
my_host_integration_core_api_throw_async_error_from_void_response_class_init(
    MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_throw_async_error_from_void_response_dispose;
}

static MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
my_host_integration_core_api_throw_async_error_from_void_response_new(
    void return_value) {
  MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_async_error_from_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
my_host_integration_core_api_throw_async_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_async_error_from_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    my_host_integration_core_api_throw_async_flutter_error_response, MY,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
              my_host_integration_core_api_throw_async_flutter_error_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_throw_async_flutter_error_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_throw_async_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_throw_async_flutter_error_response_init(
    MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self) {}

static void
my_host_integration_core_api_throw_async_flutter_error_response_class_init(
    MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_throw_async_flutter_error_response_dispose;
}

static MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
my_host_integration_core_api_throw_async_flutter_error_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_async_flutter_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
my_host_integration_core_api_throw_async_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_throw_async_flutter_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiEchoAsyncAllTypesResponse,
                     my_host_integration_core_api_echo_async_all_types_response,
                     MY,
                     HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiEchoAsyncAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncAllTypesResponse,
              my_host_integration_core_api_echo_async_all_types_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_echo_async_all_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_all_types_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_all_types_response_init(
    MyHostIntegrationCoreApiEchoAsyncAllTypesResponse* self) {}

static void
my_host_integration_core_api_echo_async_all_types_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncAllTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_all_types_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncAllTypesResponse*
my_host_integration_core_api_echo_async_all_types_response_new(
    MyAllTypes* return_value) {
  MyHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_all_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncAllTypesResponse*
my_host_integration_core_api_echo_async_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_all_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    my_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    my_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
    MyAllNullableTypes* return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    my_host_integration_core_api_echo_async_nullable_int_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableIntResponse,
              my_host_integration_core_api_echo_async_nullable_int_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_int_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_nullable_int_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableIntResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_int_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_int_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableIntResponse*
my_host_integration_core_api_echo_async_nullable_int_response_new(
    int64_t return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableIntResponse*
my_host_integration_core_api_echo_async_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    my_host_integration_core_api_echo_async_nullable_double_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
              my_host_integration_core_api_echo_async_nullable_double_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_async_nullable_double_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_double_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_double_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
my_host_integration_core_api_echo_async_nullable_double_response_new(
    double return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
my_host_integration_core_api_echo_async_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    my_host_integration_core_api_echo_async_nullable_bool_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
              my_host_integration_core_api_echo_async_nullable_bool_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_bool_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_nullable_bool_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_bool_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_bool_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
my_host_integration_core_api_echo_async_nullable_bool_response_new(
    gboolean return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
my_host_integration_core_api_echo_async_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    my_host_integration_core_api_echo_async_nullable_string_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableStringResponse,
              my_host_integration_core_api_echo_async_nullable_string_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_async_nullable_string_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableStringResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_string_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_string_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableStringResponse*
my_host_integration_core_api_echo_async_nullable_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableStringResponse*
my_host_integration_core_api_echo_async_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    my_host_integration_core_api_echo_async_nullable_uint8_list_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    my_host_integration_core_api_echo_async_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_async_nullable_uint8_list_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_uint8_list_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
my_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
    const uint8_t* return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_uint8_list_from_bytes(return_value, null));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
my_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    my_host_integration_core_api_echo_async_nullable_object_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
              my_host_integration_core_api_echo_async_nullable_object_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_object_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_echo_async_nullable_object_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_object_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_object_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
my_host_integration_core_api_echo_async_nullable_object_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
my_host_integration_core_api_echo_async_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableListResponse,
    my_host_integration_core_api_echo_async_nullable_list_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableListResponse,
              my_host_integration_core_api_echo_async_nullable_list_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_nullable_list_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableListResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_list_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_list_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableListResponse*
my_host_integration_core_api_echo_async_nullable_list_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableListResponse*
my_host_integration_core_api_echo_async_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    my_host_integration_core_api_echo_async_nullable_map_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableMapResponse,
              my_host_integration_core_api_echo_async_nullable_map_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_map_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_map_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_nullable_map_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableMapResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_map_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_map_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableMapResponse*
my_host_integration_core_api_echo_async_nullable_map_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableMapResponse*
my_host_integration_core_api_echo_async_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    my_host_integration_core_api_echo_async_nullable_enum_response, MY,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
              my_host_integration_core_api_echo_async_nullable_enum_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_echo_async_nullable_enum_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_echo_async_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_echo_async_nullable_enum_response_init(
    MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self) {}

static void
my_host_integration_core_api_echo_async_nullable_enum_response_class_init(
    MyHostIntegrationCoreApiEchoAsyncNullableEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_echo_async_nullable_enum_response_dispose;
}

static MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
my_host_integration_core_api_echo_async_nullable_enum_response_new(
    MyAnEnum return_value) {
  MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
my_host_integration_core_api_echo_async_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostIntegrationCoreApiCallFlutterNoopResponse,
                     my_host_integration_core_api_call_flutter_noop_response,
                     MY, HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE,
                     GObject)

struct _MyHostIntegrationCoreApiCallFlutterNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterNoopResponse,
              my_host_integration_core_api_call_flutter_noop_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_call_flutter_noop_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterNoopResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_noop_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_noop_response_init(
    MyHostIntegrationCoreApiCallFlutterNoopResponse* self) {}

static void my_host_integration_core_api_call_flutter_noop_response_class_init(
    MyHostIntegrationCoreApiCallFlutterNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_noop_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterNoopResponse*
my_host_integration_core_api_call_flutter_noop_response_new(void return_value) {
  MyHostIntegrationCoreApiCallFlutterNoopResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MyHostIntegrationCoreApiCallFlutterNoopResponse*
my_host_integration_core_api_call_flutter_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterNoopResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    my_host_integration_core_api_call_flutter_throw_error_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterThrowErrorResponse,
              my_host_integration_core_api_call_flutter_throw_error_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_throw_error_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_throw_error_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_throw_error_response_init(
    MyHostIntegrationCoreApiCallFlutterThrowErrorResponse* self) {}

static void
my_host_integration_core_api_call_flutter_throw_error_response_class_init(
    MyHostIntegrationCoreApiCallFlutterThrowErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_throw_error_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterThrowErrorResponse*
my_host_integration_core_api_call_flutter_throw_error_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_throw_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterThrowErrorResponse*
my_host_integration_core_api_call_flutter_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_throw_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    my_host_integration_core_api_call_flutter_throw_error_from_void_response,
    MY, HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    my_host_integration_core_api_call_flutter_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_throw_error_from_void_response_init(
    MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self) {}

static void
my_host_integration_core_api_call_flutter_throw_error_from_void_response_class_init(
    MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
my_host_integration_core_api_call_flutter_throw_error_from_void_response_new(
    void return_value) {
  MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
my_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    my_host_integration_core_api_call_flutter_echo_all_types_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
              my_host_integration_core_api_call_flutter_echo_all_types_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_all_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_all_types_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_all_types_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_all_types_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
my_host_integration_core_api_call_flutter_echo_all_types_response_new(
    MyAllTypes* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
my_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    my_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    MY, HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    my_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
    MyAllNullableTypes* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_init(
    MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
        self) {}

static void
my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_class_init(
    MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
    MyAllNullableTypes* return_value) {
  MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(0, G_OBJECT(return_value)));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    my_host_integration_core_api_call_flutter_echo_bool_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoBoolResponse,
              my_host_integration_core_api_call_flutter_echo_bool_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_bool_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_bool_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_bool_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoBoolResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_bool_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_bool_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoBoolResponse*
my_host_integration_core_api_call_flutter_echo_bool_response_new(
    gboolean return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoBoolResponse*
my_host_integration_core_api_call_flutter_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoIntResponse,
    my_host_integration_core_api_call_flutter_echo_int_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoIntResponse,
              my_host_integration_core_api_call_flutter_echo_int_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_call_flutter_echo_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_int_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_int_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoIntResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_int_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_int_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoIntResponse*
my_host_integration_core_api_call_flutter_echo_int_response_new(
    int64_t return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoIntResponse*
my_host_integration_core_api_call_flutter_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    my_host_integration_core_api_call_flutter_echo_double_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
              my_host_integration_core_api_call_flutter_echo_double_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_double_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_double_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_double_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_double_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
my_host_integration_core_api_call_flutter_echo_double_response_new(
    double return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
my_host_integration_core_api_call_flutter_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoStringResponse,
    my_host_integration_core_api_call_flutter_echo_string_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoStringResponse,
              my_host_integration_core_api_call_flutter_echo_string_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_string_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_string_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoStringResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_string_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_string_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoStringResponse*
my_host_integration_core_api_call_flutter_echo_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoStringResponse*
my_host_integration_core_api_call_flutter_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    my_host_integration_core_api_call_flutter_echo_uint8_list_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    my_host_integration_core_api_call_flutter_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_uint8_list_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_uint8_list_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
my_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
    const uint8_t* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_uint8_list_from_bytes(return_value, null));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
my_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoListResponse,
    my_host_integration_core_api_call_flutter_echo_list_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoListResponse,
              my_host_integration_core_api_call_flutter_echo_list_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_list_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_list_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoListResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_list_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_list_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoListResponse*
my_host_integration_core_api_call_flutter_echo_list_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoListResponse*
my_host_integration_core_api_call_flutter_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoMapResponse,
    my_host_integration_core_api_call_flutter_echo_map_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoMapResponse,
              my_host_integration_core_api_call_flutter_echo_map_response,
              G_TYPE_OBJECT)

static void my_host_integration_core_api_call_flutter_echo_map_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_map_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_map_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoMapResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_map_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_map_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoMapResponse*
my_host_integration_core_api_call_flutter_echo_map_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoMapResponse*
my_host_integration_core_api_call_flutter_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    my_host_integration_core_api_call_flutter_echo_enum_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApiCallFlutterEchoEnumResponse,
              my_host_integration_core_api_call_flutter_echo_enum_response,
              G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_enum_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_enum_response_parent_class)
      ->dispose(object);
}

static void my_host_integration_core_api_call_flutter_echo_enum_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoEnumResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_enum_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_enum_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoEnumResponse*
my_host_integration_core_api_call_flutter_echo_enum_response_new(
    MyAnEnum return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoEnumResponse*
my_host_integration_core_api_call_flutter_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_bool_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_bool_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_bool_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
my_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
    gboolean return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
my_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_int_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_int_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_int_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
my_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
    int64_t return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
my_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_double_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_double_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_double_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
my_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
    double return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_double(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
my_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_string_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_string_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_string_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
my_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
    const gchar* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
my_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE,
    GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_uint8_list_from_bytes(return_value, null));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_list_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_list_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_list_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
my_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
my_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_map_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_map_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_map_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
my_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
    FlValue* return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
my_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(g_object_new(
          my_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_enum_response, MY,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE, GObject)

struct _MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    my_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
my_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose(
    GObject* object) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      my_host_integration_core_api_call_flutter_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
my_host_integration_core_api_call_flutter_echo_nullable_enum_response_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self) {}

static void
my_host_integration_core_api_call_flutter_echo_nullable_enum_response_class_init(
    MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      my_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
my_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
    MyAnEnum return_value) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
my_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      MY_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              my_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostIntegrationCoreApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  const MyHostIntegrationCoreApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;

  FlBasicMessageChannel* noop_channel;
  FlBasicMessageChannel* echo_all_types_channel;
  FlBasicMessageChannel* throw_error_channel;
  FlBasicMessageChannel* throw_error_from_void_channel;
  FlBasicMessageChannel* throw_flutter_error_channel;
  FlBasicMessageChannel* echo_int_channel;
  FlBasicMessageChannel* echo_double_channel;
  FlBasicMessageChannel* echo_bool_channel;
  FlBasicMessageChannel* echo_string_channel;
  FlBasicMessageChannel* echo_uint8_list_channel;
  FlBasicMessageChannel* echo_object_channel;
  FlBasicMessageChannel* echo_list_channel;
  FlBasicMessageChannel* echo_map_channel;
  FlBasicMessageChannel* echo_class_wrapper_channel;
  FlBasicMessageChannel* echo_enum_channel;
  FlBasicMessageChannel* echo_named_default_string_channel;
  FlBasicMessageChannel* echo_optional_default_double_channel;
  FlBasicMessageChannel* echo_required_int_channel;
  FlBasicMessageChannel* echo_all_nullable_types_channel;
  FlBasicMessageChannel* extract_nested_nullable_string_channel;
  FlBasicMessageChannel* create_nested_nullable_string_channel;
  FlBasicMessageChannel* send_multiple_nullable_types_channel;
  FlBasicMessageChannel* echo_nullable_int_channel;
  FlBasicMessageChannel* echo_nullable_double_channel;
  FlBasicMessageChannel* echo_nullable_bool_channel;
  FlBasicMessageChannel* echo_nullable_string_channel;
  FlBasicMessageChannel* echo_nullable_uint8_list_channel;
  FlBasicMessageChannel* echo_nullable_object_channel;
  FlBasicMessageChannel* echo_nullable_list_channel;
  FlBasicMessageChannel* echo_nullable_map_channel;
  FlBasicMessageChannel* echo_nullable_enum_channel;
  FlBasicMessageChannel* echo_optional_nullable_int_channel;
  FlBasicMessageChannel* echo_named_nullable_string_channel;
  FlBasicMessageChannel* noop_async_channel;
  FlBasicMessageChannel* echo_async_int_channel;
  FlBasicMessageChannel* echo_async_double_channel;
  FlBasicMessageChannel* echo_async_bool_channel;
  FlBasicMessageChannel* echo_async_string_channel;
  FlBasicMessageChannel* echo_async_uint8_list_channel;
  FlBasicMessageChannel* echo_async_object_channel;
  FlBasicMessageChannel* echo_async_list_channel;
  FlBasicMessageChannel* echo_async_map_channel;
  FlBasicMessageChannel* echo_async_enum_channel;
  FlBasicMessageChannel* throw_async_error_channel;
  FlBasicMessageChannel* throw_async_error_from_void_channel;
  FlBasicMessageChannel* throw_async_flutter_error_channel;
  FlBasicMessageChannel* echo_async_all_types_channel;
  FlBasicMessageChannel* echo_async_nullable_all_nullable_types_channel;
  FlBasicMessageChannel* echo_async_nullable_int_channel;
  FlBasicMessageChannel* echo_async_nullable_double_channel;
  FlBasicMessageChannel* echo_async_nullable_bool_channel;
  FlBasicMessageChannel* echo_async_nullable_string_channel;
  FlBasicMessageChannel* echo_async_nullable_uint8_list_channel;
  FlBasicMessageChannel* echo_async_nullable_object_channel;
  FlBasicMessageChannel* echo_async_nullable_list_channel;
  FlBasicMessageChannel* echo_async_nullable_map_channel;
  FlBasicMessageChannel* echo_async_nullable_enum_channel;
  FlBasicMessageChannel* call_flutter_noop_channel;
  FlBasicMessageChannel* call_flutter_throw_error_channel;
  FlBasicMessageChannel* call_flutter_throw_error_from_void_channel;
  FlBasicMessageChannel* call_flutter_echo_all_types_channel;
  FlBasicMessageChannel* call_flutter_echo_all_nullable_types_channel;
  FlBasicMessageChannel* call_flutter_send_multiple_nullable_types_channel;
  FlBasicMessageChannel* call_flutter_echo_bool_channel;
  FlBasicMessageChannel* call_flutter_echo_int_channel;
  FlBasicMessageChannel* call_flutter_echo_double_channel;
  FlBasicMessageChannel* call_flutter_echo_string_channel;
  FlBasicMessageChannel* call_flutter_echo_uint8_list_channel;
  FlBasicMessageChannel* call_flutter_echo_list_channel;
  FlBasicMessageChannel* call_flutter_echo_map_channel;
  FlBasicMessageChannel* call_flutter_echo_enum_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_bool_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_int_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_double_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_string_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_uint8_list_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_list_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_map_channel;
  FlBasicMessageChannel* call_flutter_echo_nullable_enum_channel;
};

G_DEFINE_TYPE(MyHostIntegrationCoreApi, my_host_integration_core_api,
              G_TYPE_OBJECT)

static void noop_cb(FlBasicMessageChannel* channel, FlValue* message,
                    FlBasicMessageChannelResponseHandle* response_handle,
                    gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiNoopResponse) response =
      self->vtable->noop(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.noop: %s",
              error->message);
  }
}

static void echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_all_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoAllTypesResponse) response =
      self->vtable->echo_all_types(
          self,
          MY_ALL_TYPES(fl_value_get_custom_value_object(
              fl_value_get_list_value(message, 0))),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoAllTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAllTypes: %s",
        error->message);
  }
}

static void throw_error_cb(FlBasicMessageChannel* channel, FlValue* message,
                           FlBasicMessageChannelResponseHandle* response_handle,
                           gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_error == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiThrowErrorResponse) response =
      self->vtable->throw_error(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.throwError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.throwError: %s",
        error->message);
  }
}

static void throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_error_from_void == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiThrowErrorFromVoidResponse) response =
      self->vtable->throw_error_from_void(self, self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.throwErrorFromVoid");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.throwErrorFromVoid: "
        "%s",
        error->message);
  }
}

static void throw_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_flutter_error == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiThrowFlutterErrorResponse) response =
      self->vtable->throw_flutter_error(self, self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.throwFlutterError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.throwFlutterError: "
        "%s",
        error->message);
  }
}

static void echo_int_cb(FlBasicMessageChannel* channel, FlValue* message,
                        FlBasicMessageChannelResponseHandle* response_handle,
                        gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoIntResponse) response =
      self->vtable->echo_int(
          self, fl_value_get_int(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.echoInt: %s",
              error->message);
  }
}

static void echo_double_cb(FlBasicMessageChannel* channel, FlValue* message,
                           FlBasicMessageChannelResponseHandle* response_handle,
                           gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoDoubleResponse) response =
      self->vtable->echo_double(
          self, fl_value_get_double(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoDouble: %s",
        error->message);
  }
}

static void echo_bool_cb(FlBasicMessageChannel* channel, FlValue* message,
                         FlBasicMessageChannelResponseHandle* response_handle,
                         gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_bool == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoBoolResponse) response =
      self->vtable->echo_bool(
          self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.echoBool: %s",
              error->message);
  }
}

static void echo_string_cb(FlBasicMessageChannel* channel, FlValue* message,
                           FlBasicMessageChannelResponseHandle* response_handle,
                           gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoStringResponse) response =
      self->vtable->echo_string(
          self, fl_value_get_string(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoString: %s",
        error->message);
  }
}

static void echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_uint8_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_UINT8_LIST) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoUint8ListResponse) response =
      self->vtable->echo_uint8_list(
          self, fl_value_get_uint8_list(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoUint8List: %s",
        error->message);
  }
}

static void echo_object_cb(FlBasicMessageChannel* channel, FlValue* message,
                           FlBasicMessageChannelResponseHandle* response_handle,
                           gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_object == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoObjectResponse) response =
      self->vtable->echo_object(self, fl_value_get_list_value(message, 0),
                                self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoObject: %s",
        error->message);
  }
}

static void echo_list_cb(FlBasicMessageChannel* channel, FlValue* message,
                         FlBasicMessageChannelResponseHandle* response_handle,
                         gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoListResponse) response =
      self->vtable->echo_list(self, fl_value_get_list_value(message, 0),
                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.echoList: %s",
              error->message);
  }
}

static void echo_map_cb(FlBasicMessageChannel* channel, FlValue* message,
                        FlBasicMessageChannelResponseHandle* response_handle,
                        gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_map == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_MAP) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoMapResponse) response =
      self->vtable->echo_map(self, fl_value_get_list_value(message, 0),
                             self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.echoMap: %s",
              error->message);
  }
}

static void echo_class_wrapper_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_wrapper == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoClassWrapperResponse) response =
      self->vtable->echo_class_wrapper(
          self,
          MY_ALL_CLASSES_WRAPPER(fl_value_get_custom_value_object(
              fl_value_get_list_value(message, 0))),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoClassWrapper");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoClassWrapper: "
        "%s",
        error->message);
  }
}

static void echo_enum_cb(FlBasicMessageChannel* channel, FlValue* message,
                         FlBasicMessageChannelResponseHandle* response_handle,
                         gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoEnumResponse) response =
      self->vtable->echo_enum(self,
                              static_cast<MyAnEnum>(fl_value_get_int(
                                  fl_value_get_list_value(message, 0))),
                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.echoEnum: %s",
              error->message);
  }
}

static void echo_named_default_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_default_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNamedDefaultStringResponse) response =
      self->vtable->echo_named_default_string(
          self, fl_value_get_string(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.echoNamedDefaultString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoNamedDefaultString: %s",
        error->message);
  }
}

static void echo_optional_default_double_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_default_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse)
      response = self->vtable->echo_optional_default_double(
          self, fl_value_get_double(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.echoOptionalDefaultDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoOptionalDefaultDouble: %s",
        error->message);
  }
}

static void echo_required_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_required_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoRequiredIntResponse) response =
      self->vtable->echo_required_int(
          self, fl_value_get_int(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoRequiredInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoRequiredInt: %s",
        error->message);
  }
}

static void echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoAllNullableTypesResponse) response =
      self->vtable->echo_all_nullable_types(
          self,
          MY_ALL_NULLABLE_TYPES(fl_value_get_custom_value_object(
              fl_value_get_list_value(message, 0))),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoAllNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAllNullableTypes: %s",
        error->message);
  }
}

static void extract_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->extract_nested_nullable_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiExtractNestedNullableStringResponse)
      response = self->vtable->extract_nested_nullable_string(
          self,
          MY_ALL_CLASSES_WRAPPER(fl_value_get_custom_value_object(
              fl_value_get_list_value(message, 0))),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.extractNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.extractNestedNullableString: %s",
        error->message);
  }
}

static void create_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->create_nested_nullable_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiCreateNestedNullableStringResponse)
      response = self->vtable->create_nested_nullable_string(
          self, fl_value_get_string(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.createNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.createNestedNullableString: %s",
        error->message);
  }
}

static void send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 3 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL ||
      fl_value_get_type(fl_value_get_list_value(message, 1)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(message, 2)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiSendMultipleNullableTypesResponse)
      response = self->vtable->send_multiple_nullable_types(
          self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
          fl_value_get_int(fl_value_get_list_value(message, 1)),
          fl_value_get_string(fl_value_get_list_value(message, 2)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.sendMultipleNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.sendMultipleNullableTypes: %s",
        error->message);
  }
}

static void echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableIntResponse) response =
      self->vtable->echo_nullable_int(
          self, fl_value_get_int(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableInt: %s",
        error->message);
  }
}

static void echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableDoubleResponse) response =
      self->vtable->echo_nullable_double(
          self, fl_value_get_double(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableDouble: "
        "%s",
        error->message);
  }
}

static void echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_bool == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableBoolResponse) response =
      self->vtable->echo_nullable_bool(
          self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableBool: "
        "%s",
        error->message);
  }
}

static void echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableStringResponse) response =
      self->vtable->echo_nullable_string(
          self, fl_value_get_string(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableString: "
        "%s",
        error->message);
  }
}

static void echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_uint8_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_UINT8_LIST) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableUint8ListResponse) response =
      self->vtable->echo_nullable_uint8_list(
          self, fl_value_get_uint8_list(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoNullableUint8List: %s",
        error->message);
  }
}

static void echo_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_object == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableObjectResponse) response =
      self->vtable->echo_nullable_object(
          self, fl_value_get_list_value(message, 0), self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableObject: "
        "%s",
        error->message);
  }
}

static void echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableListResponse) response =
      self->vtable->echo_nullable_list(
          self, fl_value_get_list_value(message, 0), self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableList: "
        "%s",
        error->message);
  }
}

static void echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_map == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_MAP) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableMapResponse) response =
      self->vtable->echo_nullable_map(self, fl_value_get_list_value(message, 0),
                                      self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostIntegrationCoreApi.echoNullableMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableMap: %s",
        error->message);
  }
}

static void echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_enum == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNullableEnumResponse) response =
      self->vtable->echo_nullable_enum(
          self,
          static_cast<MyAnEnum>(
              fl_value_get_int(fl_value_get_list_value(message, 0))),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to HostIntegrationCoreApi.echoNullableEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoNullableEnum: "
        "%s",
        error->message);
  }
}

static void echo_optional_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_nullable_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoOptionalNullableIntResponse) response =
      self->vtable->echo_optional_nullable_int(
          self, fl_value_get_int(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.echoOptionalNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoOptionalNullableInt: %s",
        error->message);
  }
}

static void echo_named_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_nullable_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  g_autoptr(MyHostIntegrationCoreApiEchoNamedNullableStringResponse) response =
      self->vtable->echo_named_nullable_string(
          self, fl_value_get_string(fl_value_get_list_value(message, 0)),
          self->user_data);
  if (response == nullptr) {
    g_warning(
        "No response returned to "
        "HostIntegrationCoreApi.echoNamedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoNamedNullableString: %s",
        error->message);
  }
}

static void noop_async_cb(FlBasicMessageChannel* channel, FlValue* message,
                          FlBasicMessageChannelResponseHandle* response_handle,
                          gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop_async == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->noop_async(self, response_handle, self->user_data);
}

static void echo_async_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->echo_async_int(
      self, fl_value_get_int(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_double_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  self->vtable->echo_async_double(
      self, fl_value_get_double(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_bool == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL) {
    return;
  }

  self->vtable->echo_async_bool(
      self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  self->vtable->echo_async_string(
      self, fl_value_get_string(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_uint8_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_UINT8_LIST) {
    return;
  }

  self->vtable->echo_async_uint8_list(
      self, fl_value_get_uint8_list(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_object_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_object == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1) {
    return;
  }

  self->vtable->echo_async_object(self, fl_value_get_list_value(message, 0),
                                  response_handle, self->user_data);
}

static void echo_async_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return;
  }

  self->vtable->echo_async_list(self, fl_value_get_list_value(message, 0),
                                response_handle, self->user_data);
}

static void echo_async_map_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_map == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_MAP) {
    return;
  }

  self->vtable->echo_async_map(self, fl_value_get_list_value(message, 0),
                               response_handle, self->user_data);
}

static void echo_async_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_enum == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->echo_async_enum(self,
                                static_cast<MyAnEnum>(fl_value_get_int(
                                    fl_value_get_list_value(message, 0))),
                                response_handle, self->user_data);
}

static void throw_async_error_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_async_error == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->throw_async_error(self, response_handle, self->user_data);
}

static void throw_async_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_error_from_void == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->throw_async_error_from_void(self, response_handle,
                                            self->user_data);
}

static void throw_async_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_flutter_error == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->throw_async_flutter_error(self, response_handle,
                                          self->user_data);
}

static void echo_async_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_all_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  self->vtable->echo_async_all_types(
      self,
      MY_ALL_TYPES(fl_value_get_custom_value_object(
          fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void echo_async_nullable_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  self->vtable->echo_async_nullable_all_nullable_types(
      self,
      MY_ALL_NULLABLE_TYPES(fl_value_get_custom_value_object(
          fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void echo_async_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->echo_async_nullable_int(
      self, fl_value_get_int(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  self->vtable->echo_async_nullable_double(
      self, fl_value_get_double(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_bool == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL) {
    return;
  }

  self->vtable->echo_async_nullable_bool(
      self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  self->vtable->echo_async_nullable_string(
      self, fl_value_get_string(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_uint8_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_UINT8_LIST) {
    return;
  }

  self->vtable->echo_async_nullable_uint8_list(
      self, fl_value_get_uint8_list(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void echo_async_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_object == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1) {
    return;
  }

  self->vtable->echo_async_nullable_object(self,
                                           fl_value_get_list_value(message, 0),
                                           response_handle, self->user_data);
}

static void echo_async_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return;
  }

  self->vtable->echo_async_nullable_list(self,
                                         fl_value_get_list_value(message, 0),
                                         response_handle, self->user_data);
}

static void echo_async_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_map == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_MAP) {
    return;
  }

  self->vtable->echo_async_nullable_map(self,
                                        fl_value_get_list_value(message, 0),
                                        response_handle, self->user_data);
}

static void echo_async_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->echo_async_nullable_enum(
      self,
      static_cast<MyAnEnum>(
          fl_value_get_int(fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void call_flutter_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->call_flutter_noop == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->call_flutter_noop(self, response_handle, self->user_data);
}

static void call_flutter_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->call_flutter_throw_error(self, response_handle,
                                         self->user_data);
}

static void call_flutter_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error_from_void == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->call_flutter_throw_error_from_void(self, response_handle,
                                                   self->user_data);
}

static void call_flutter_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  self->vtable->call_flutter_echo_all_types(
      self,
      MY_ALL_TYPES(fl_value_get_custom_value_object(
          fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void call_flutter_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_CUSTOM) {
    return;
  }

  self->vtable->call_flutter_echo_all_nullable_types(
      self,
      MY_ALL_NULLABLE_TYPES(fl_value_get_custom_value_object(
          fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void call_flutter_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_send_multiple_nullable_types == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 3 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL ||
      fl_value_get_type(fl_value_get_list_value(message, 1)) !=
          FL_VALUE_TYPE_INT ||
      fl_value_get_type(fl_value_get_list_value(message, 2)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  self->vtable->call_flutter_send_multiple_nullable_types(
      self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
      fl_value_get_int(fl_value_get_list_value(message, 1)),
      fl_value_get_string(fl_value_get_list_value(message, 2)), response_handle,
      self->user_data);
}

static void call_flutter_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_bool == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL) {
    return;
  }

  self->vtable->call_flutter_echo_bool(
      self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->call_flutter_echo_int(
      self, fl_value_get_int(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  self->vtable->call_flutter_echo_double(
      self, fl_value_get_double(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  self->vtable->call_flutter_echo_string(
      self, fl_value_get_string(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_uint8_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_UINT8_LIST) {
    return;
  }

  self->vtable->call_flutter_echo_uint8_list(
      self, fl_value_get_uint8_list(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return;
  }

  self->vtable->call_flutter_echo_list(self,
                                       fl_value_get_list_value(message, 0),
                                       response_handle, self->user_data);
}

static void call_flutter_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_map == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_MAP) {
    return;
  }

  self->vtable->call_flutter_echo_map(self, fl_value_get_list_value(message, 0),
                                      response_handle, self->user_data);
}

static void call_flutter_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->call_flutter_echo_enum(
      self,
      static_cast<MyAnEnum>(
          fl_value_get_int(fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void call_flutter_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_bool == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_BOOL) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_bool(
      self, fl_value_get_bool(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_int == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_int(
      self, fl_value_get_int(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_double == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_DOUBLE) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_double(
      self, fl_value_get_double(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_string == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_string(
      self, fl_value_get_string(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_uint8_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_UINT8_LIST) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_uint8_list(
      self, fl_value_get_uint8_list(fl_value_get_list_value(message, 0)),
      response_handle, self->user_data);
}

static void call_flutter_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_list == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_LIST) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_list(
      self, fl_value_get_list_value(message, 0), response_handle,
      self->user_data);
}

static void call_flutter_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_map == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_MAP) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_map(
      self, fl_value_get_list_value(message, 0), response_handle,
      self->user_data);
}

static void call_flutter_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_INT) {
    return;
  }

  self->vtable->call_flutter_echo_nullable_enum(
      self,
      static_cast<MyAnEnum>(
          fl_value_get_int(fl_value_get_list_value(message, 0))),
      response_handle, self->user_data);
}

static void my_host_integration_core_api_dispose(GObject* object) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(object);
  g_clear_object(&self->messenger);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;

  g_clear_object(&self->noop_channel);
  g_clear_object(&self->echo_all_types_channel);
  g_clear_object(&self->throw_error_channel);
  g_clear_object(&self->throw_error_from_void_channel);
  g_clear_object(&self->throw_flutter_error_channel);
  g_clear_object(&self->echo_int_channel);
  g_clear_object(&self->echo_double_channel);
  g_clear_object(&self->echo_bool_channel);
  g_clear_object(&self->echo_string_channel);
  g_clear_object(&self->echo_uint8_list_channel);
  g_clear_object(&self->echo_object_channel);
  g_clear_object(&self->echo_list_channel);
  g_clear_object(&self->echo_map_channel);
  g_clear_object(&self->echo_class_wrapper_channel);
  g_clear_object(&self->echo_enum_channel);
  g_clear_object(&self->echo_named_default_string_channel);
  g_clear_object(&self->echo_optional_default_double_channel);
  g_clear_object(&self->echo_required_int_channel);
  g_clear_object(&self->echo_all_nullable_types_channel);
  g_clear_object(&self->extract_nested_nullable_string_channel);
  g_clear_object(&self->create_nested_nullable_string_channel);
  g_clear_object(&self->send_multiple_nullable_types_channel);
  g_clear_object(&self->echo_nullable_int_channel);
  g_clear_object(&self->echo_nullable_double_channel);
  g_clear_object(&self->echo_nullable_bool_channel);
  g_clear_object(&self->echo_nullable_string_channel);
  g_clear_object(&self->echo_nullable_uint8_list_channel);
  g_clear_object(&self->echo_nullable_object_channel);
  g_clear_object(&self->echo_nullable_list_channel);
  g_clear_object(&self->echo_nullable_map_channel);
  g_clear_object(&self->echo_nullable_enum_channel);
  g_clear_object(&self->echo_optional_nullable_int_channel);
  g_clear_object(&self->echo_named_nullable_string_channel);
  g_clear_object(&self->noop_async_channel);
  g_clear_object(&self->echo_async_int_channel);
  g_clear_object(&self->echo_async_double_channel);
  g_clear_object(&self->echo_async_bool_channel);
  g_clear_object(&self->echo_async_string_channel);
  g_clear_object(&self->echo_async_uint8_list_channel);
  g_clear_object(&self->echo_async_object_channel);
  g_clear_object(&self->echo_async_list_channel);
  g_clear_object(&self->echo_async_map_channel);
  g_clear_object(&self->echo_async_enum_channel);
  g_clear_object(&self->throw_async_error_channel);
  g_clear_object(&self->throw_async_error_from_void_channel);
  g_clear_object(&self->throw_async_flutter_error_channel);
  g_clear_object(&self->echo_async_all_types_channel);
  g_clear_object(&self->echo_async_nullable_all_nullable_types_channel);
  g_clear_object(&self->echo_async_nullable_int_channel);
  g_clear_object(&self->echo_async_nullable_double_channel);
  g_clear_object(&self->echo_async_nullable_bool_channel);
  g_clear_object(&self->echo_async_nullable_string_channel);
  g_clear_object(&self->echo_async_nullable_uint8_list_channel);
  g_clear_object(&self->echo_async_nullable_object_channel);
  g_clear_object(&self->echo_async_nullable_list_channel);
  g_clear_object(&self->echo_async_nullable_map_channel);
  g_clear_object(&self->echo_async_nullable_enum_channel);
  g_clear_object(&self->call_flutter_noop_channel);
  g_clear_object(&self->call_flutter_throw_error_channel);
  g_clear_object(&self->call_flutter_throw_error_from_void_channel);
  g_clear_object(&self->call_flutter_echo_all_types_channel);
  g_clear_object(&self->call_flutter_echo_all_nullable_types_channel);
  g_clear_object(&self->call_flutter_send_multiple_nullable_types_channel);
  g_clear_object(&self->call_flutter_echo_bool_channel);
  g_clear_object(&self->call_flutter_echo_int_channel);
  g_clear_object(&self->call_flutter_echo_double_channel);
  g_clear_object(&self->call_flutter_echo_string_channel);
  g_clear_object(&self->call_flutter_echo_uint8_list_channel);
  g_clear_object(&self->call_flutter_echo_list_channel);
  g_clear_object(&self->call_flutter_echo_map_channel);
  g_clear_object(&self->call_flutter_echo_enum_channel);
  g_clear_object(&self->call_flutter_echo_nullable_bool_channel);
  g_clear_object(&self->call_flutter_echo_nullable_int_channel);
  g_clear_object(&self->call_flutter_echo_nullable_double_channel);
  g_clear_object(&self->call_flutter_echo_nullable_string_channel);
  g_clear_object(&self->call_flutter_echo_nullable_uint8_list_channel);
  g_clear_object(&self->call_flutter_echo_nullable_list_channel);
  g_clear_object(&self->call_flutter_echo_nullable_map_channel);
  g_clear_object(&self->call_flutter_echo_nullable_enum_channel);
  G_OBJECT_CLASS(my_host_integration_core_api_parent_class)->dispose(object);
}

static void my_host_integration_core_api_init(MyHostIntegrationCoreApi* self) {}

static void my_host_integration_core_api_class_init(
    MyHostIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_host_integration_core_api_dispose;
}

MyHostIntegrationCoreApi* my_host_integration_core_api_new(
    FlBinaryMessenger* messenger, const MyHostIntegrationCoreApiVTable* vtable,
    gpointer user_data, GDestroyNotify user_data_free_func) {
  MyHostIntegrationCoreApi* self = MY_HOST_INTEGRATION_CORE_API(
      g_object_new(my_host_integration_core_api_get_type(), nullptr));
  self->messenger = g_object_ref(messenger);
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;

  g_autoptr(MyHostIntegrationCoreApiCodec) codec =
      my_host_integration_core_api_codec_new();
  self->noop_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi.noop",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->noop_channel, noop_cb,
                                               self, nullptr);
  self->echo_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAllTypes",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_all_types_channel, echo_all_types_cb, self, nullptr);
  self->throw_error_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.throwError",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->throw_error_channel,
                                               throw_error_cb, self, nullptr);
  self->throw_error_from_void_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwErrorFromVoid",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_error_from_void_channel, throw_error_from_void_cb, self,
      nullptr);
  self->throw_flutter_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwFlutterError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_flutter_error_channel, throw_flutter_error_cb, self, nullptr);
  self->echo_int_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoInt",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_int_channel,
                                               echo_int_cb, self, nullptr);
  self->echo_double_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoDouble",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_double_channel,
                                               echo_double_cb, self, nullptr);
  self->echo_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoBool",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_bool_channel,
                                               echo_bool_cb, self, nullptr);
  self->echo_string_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoString",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_string_channel,
                                               echo_string_cb, self, nullptr);
  self->echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoUint8List",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_uint8_list_channel, echo_uint8_list_cb, self, nullptr);
  self->echo_object_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoObject",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_object_channel,
                                               echo_object_cb, self, nullptr);
  self->echo_list_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoList",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_list_channel,
                                               echo_list_cb, self, nullptr);
  self->echo_map_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoMap",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_map_channel,
                                               echo_map_cb, self, nullptr);
  self->echo_class_wrapper_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoClassWrapper",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_class_wrapper_channel, echo_class_wrapper_cb, self, nullptr);
  self->echo_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoEnum",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_enum_channel,
                                               echo_enum_cb, self, nullptr);
  self->echo_named_default_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNamedDefaultString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_named_default_string_channel, echo_named_default_string_cb,
      self, nullptr);
  self->echo_optional_default_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoOptionalDefaultDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_optional_default_double_channel,
      echo_optional_default_double_cb, self, nullptr);
  self->echo_required_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoRequiredInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_required_int_channel, echo_required_int_cb, self, nullptr);
  self->echo_all_nullable_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAllNullableTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_all_nullable_types_channel, echo_all_nullable_types_cb, self,
      nullptr);
  self->extract_nested_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "extractNestedNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->extract_nested_nullable_string_channel,
      extract_nested_nullable_string_cb, self, nullptr);
  self->create_nested_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "createNestedNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->create_nested_nullable_string_channel,
      create_nested_nullable_string_cb, self, nullptr);
  self->send_multiple_nullable_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "sendMultipleNullableTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->send_multiple_nullable_types_channel,
      send_multiple_nullable_types_cb, self, nullptr);
  self->echo_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_int_channel, echo_nullable_int_cb, self, nullptr);
  self->echo_nullable_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_double_channel, echo_nullable_double_cb, self,
      nullptr);
  self->echo_nullable_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_bool_channel, echo_nullable_bool_cb, self, nullptr);
  self->echo_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_string_channel, echo_nullable_string_cb, self,
      nullptr);
  self->echo_nullable_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_uint8_list_channel, echo_nullable_uint8_list_cb, self,
      nullptr);
  self->echo_nullable_object_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableObject",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_object_channel, echo_nullable_object_cb, self,
      nullptr);
  self->echo_nullable_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_list_channel, echo_nullable_list_cb, self, nullptr);
  self->echo_nullable_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_map_channel, echo_nullable_map_cb, self, nullptr);
  self->echo_nullable_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_nullable_enum_channel, echo_nullable_enum_cb, self, nullptr);
  self->echo_optional_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoOptionalNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_optional_nullable_int_channel, echo_optional_nullable_int_cb,
      self, nullptr);
  self->echo_named_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoNamedNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_named_nullable_string_channel, echo_named_nullable_string_cb,
      self, nullptr);
  self->noop_async_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.noopAsync",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->noop_async_channel,
                                               noop_async_cb, self, nullptr);
  self->echo_async_int_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncInt",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_int_channel, echo_async_int_cb, self, nullptr);
  self->echo_async_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_double_channel, echo_async_double_cb, self, nullptr);
  self->echo_async_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncBool",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_bool_channel, echo_async_bool_cb, self, nullptr);
  self->echo_async_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_string_channel, echo_async_string_cb, self, nullptr);
  self->echo_async_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_uint8_list_channel, echo_async_uint8_list_cb, self,
      nullptr);
  self->echo_async_object_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncObject",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_object_channel, echo_async_object_cb, self, nullptr);
  self->echo_async_list_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncList",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_list_channel, echo_async_list_cb, self, nullptr);
  self->echo_async_map_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncMap",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_map_channel, echo_async_map_cb, self, nullptr);
  self->echo_async_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   "dev.flutter.pigeon.pigeon_integration_"
                                   "tests.HostIntegrationCoreApi.echoAsyncEnum",
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_enum_channel, echo_async_enum_cb, self, nullptr);
  self->throw_async_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwAsyncError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_async_error_channel, throw_async_error_cb, self, nullptr);
  self->throw_async_error_from_void_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwAsyncErrorFromVoid",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_async_error_from_void_channel, throw_async_error_from_void_cb,
      self, nullptr);
  self->throw_async_flutter_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "throwAsyncFlutterError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->throw_async_flutter_error_channel, throw_async_flutter_error_cb,
      self, nullptr);
  self->echo_async_all_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncAllTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_all_types_channel, echo_async_all_types_cb, self,
      nullptr);
  self->echo_async_nullable_all_nullable_types_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableAllNullableTypes",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_all_nullable_types_channel,
      echo_async_nullable_all_nullable_types_cb, self, nullptr);
  self->echo_async_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_int_channel, echo_async_nullable_int_cb, self,
      nullptr);
  self->echo_async_nullable_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_double_channel, echo_async_nullable_double_cb,
      self, nullptr);
  self->echo_async_nullable_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_bool_channel, echo_async_nullable_bool_cb, self,
      nullptr);
  self->echo_async_nullable_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_string_channel, echo_async_nullable_string_cb,
      self, nullptr);
  self->echo_async_nullable_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_uint8_list_channel,
      echo_async_nullable_uint8_list_cb, self, nullptr);
  self->echo_async_nullable_object_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableObject",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_object_channel, echo_async_nullable_object_cb,
      self, nullptr);
  self->echo_async_nullable_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_list_channel, echo_async_nullable_list_cb, self,
      nullptr);
  self->echo_async_nullable_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_map_channel, echo_async_nullable_map_cb, self,
      nullptr);
  self->echo_async_nullable_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->echo_async_nullable_enum_channel, echo_async_nullable_enum_cb, self,
      nullptr);
  self->call_flutter_noop_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterNoop",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_noop_channel, call_flutter_noop_cb, self, nullptr);
  self->call_flutter_throw_error_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterThrowError",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_throw_error_channel, call_flutter_throw_error_cb, self,
      nullptr);
  self->call_flutter_throw_error_from_void_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterThrowErrorFromVoid",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_throw_error_from_void_channel,
      call_flutter_throw_error_from_void_cb, self, nullptr);
  self->call_flutter_echo_all_types_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoAllTypes",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_all_types_channel, call_flutter_echo_all_types_cb,
      self, nullptr);
  self->call_flutter_echo_all_nullable_types_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAllNullableTypes",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_all_nullable_types_channel,
      call_flutter_echo_all_nullable_types_cb, self, nullptr);
  self->call_flutter_send_multiple_nullable_types_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterSendMultipleNullableTypes",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_send_multiple_nullable_types_channel,
      call_flutter_send_multiple_nullable_types_cb, self, nullptr);
  self->call_flutter_echo_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_bool_channel, call_flutter_echo_bool_cb, self,
      nullptr);
  self->call_flutter_echo_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_int_channel, call_flutter_echo_int_cb, self,
      nullptr);
  self->call_flutter_echo_double_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoDouble",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_double_channel, call_flutter_echo_double_cb, self,
      nullptr);
  self->call_flutter_echo_string_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoString",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_string_channel, call_flutter_echo_string_cb, self,
      nullptr);
  self->call_flutter_echo_uint8_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoUint8List",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_uint8_list_channel,
      call_flutter_echo_uint8_list_cb, self, nullptr);
  self->call_flutter_echo_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_list_channel, call_flutter_echo_list_cb, self,
      nullptr);
  self->call_flutter_echo_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_map_channel, call_flutter_echo_map_cb, self,
      nullptr);
  self->call_flutter_echo_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_enum_channel, call_flutter_echo_enum_cb, self,
      nullptr);
  self->call_flutter_echo_nullable_bool_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableBool",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_bool_channel,
      call_flutter_echo_nullable_bool_cb, self, nullptr);
  self->call_flutter_echo_nullable_int_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableInt",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_int_channel,
      call_flutter_echo_nullable_int_cb, self, nullptr);
  self->call_flutter_echo_nullable_double_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableDouble",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_double_channel,
      call_flutter_echo_nullable_double_cb, self, nullptr);
  self->call_flutter_echo_nullable_string_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableString",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_string_channel,
      call_flutter_echo_nullable_string_cb, self, nullptr);
  self->call_flutter_echo_nullable_uint8_list_channel =
      fl_basic_message_channel_new(
          messenger,
          "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableUint8List",
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_uint8_list_channel,
      call_flutter_echo_nullable_uint8_list_cb, self, nullptr);
  self->call_flutter_echo_nullable_list_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableList",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_list_channel,
      call_flutter_echo_nullable_list_cb, self, nullptr);
  self->call_flutter_echo_nullable_map_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableMap",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_map_channel,
      call_flutter_echo_nullable_map_cb, self, nullptr);
  self->call_flutter_echo_nullable_enum_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoNullableEnum",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      self->call_flutter_echo_nullable_enum_channel,
      call_flutter_echo_nullable_enum_cb, self, nullptr);

  return self;
}

void my_host_integration_core_api_respond_noop_async(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, void return_value) {
  g_autoptr(MyHostIntegrationCoreApiNoopAsyncResponse) response =
      my_host_integration_core_api_noop_async_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->noop_async_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.noopAsync: %s",
              error->message);
  }
}

void my_host_integration_core_api_respond_error_noop_async(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiNoopAsyncResponse) response =
      my_host_integration_core_api_noop_async_response_new_error(code, message,
                                                                 details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->noop_async_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to HostIntegrationCoreApi.noopAsync: %s",
              error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncIntResponse) response =
      my_host_integration_core_api_echo_async_int_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncInt: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncIntResponse) response =
      my_host_integration_core_api_echo_async_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncInt: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, double return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      my_host_integration_core_api_echo_async_double_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      my_host_integration_core_api_echo_async_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      my_host_integration_core_api_echo_async_bool_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      my_host_integration_core_api_echo_async_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncStringResponse) response =
      my_host_integration_core_api_echo_async_string_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncStringResponse) response =
      my_host_integration_core_api_echo_async_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncUint8ListResponse) response =
      my_host_integration_core_api_echo_async_uint8_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_uint8_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncUint8List: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncUint8ListResponse) response =
      my_host_integration_core_api_echo_async_uint8_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_uint8_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncUint8List: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_object(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      my_host_integration_core_api_echo_async_object_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_object_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncObject: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_object(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      my_host_integration_core_api_echo_async_object_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_object_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncObject: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncListResponse) response =
      my_host_integration_core_api_echo_async_list_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncListResponse) response =
      my_host_integration_core_api_echo_async_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncMapResponse) response =
      my_host_integration_core_api_echo_async_map_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncMap: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncMapResponse) response =
      my_host_integration_core_api_echo_async_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncMap: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAnEnum return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      my_host_integration_core_api_echo_async_enum_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      my_host_integration_core_api_echo_async_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_throw_async_error(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      my_host_integration_core_api_throw_async_error_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.throwAsyncError: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_throw_async_error(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      my_host_integration_core_api_throw_async_error_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.throwAsyncError: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_throw_async_error_from_void(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, void return_value) {
  g_autoptr(MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse) response =
      my_host_integration_core_api_throw_async_error_from_void_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->throw_async_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.throwAsyncErrorFromVoid: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_throw_async_error_from_void(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse) response =
      my_host_integration_core_api_throw_async_error_from_void_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->throw_async_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.throwAsyncErrorFromVoid: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_throw_async_flutter_error(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse) response =
      my_host_integration_core_api_throw_async_flutter_error_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_flutter_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.throwAsyncFlutterError: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_throw_async_flutter_error(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiThrowAsyncFlutterErrorResponse) response =
      my_host_integration_core_api_throw_async_flutter_error_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->throw_async_flutter_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.throwAsyncFlutterError: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_all_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAllTypes* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncAllTypesResponse) response =
      my_host_integration_core_api_echo_async_all_types_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_all_types_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncAllTypes: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_all_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncAllTypesResponse) response =
      my_host_integration_core_api_echo_async_all_types_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_all_types_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.echoAsyncAllTypes: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_all_nullable_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAllNullableTypes* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse) response =
      my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse) response =
      my_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableIntResponse) response =
      my_host_integration_core_api_echo_async_nullable_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableInt: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableIntResponse) response =
      my_host_integration_core_api_echo_async_nullable_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableInt: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, double return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse) response =
      my_host_integration_core_api_echo_async_nullable_double_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableDoubleResponse) response =
      my_host_integration_core_api_echo_async_nullable_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse) response =
      my_host_integration_core_api_echo_async_nullable_bool_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableBoolResponse) response =
      my_host_integration_core_api_echo_async_nullable_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableStringResponse) response =
      my_host_integration_core_api_echo_async_nullable_string_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableStringResponse) response =
      my_host_integration_core_api_echo_async_nullable_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse) response =
      my_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableUint8List: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse) response =
      my_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableUint8List: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_object(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse) response =
      my_host_integration_core_api_echo_async_nullable_object_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_object_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableObject: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_object(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableObjectResponse) response =
      my_host_integration_core_api_echo_async_nullable_object_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->echo_async_nullable_object_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableObject: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableListResponse) response =
      my_host_integration_core_api_echo_async_nullable_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableListResponse) response =
      my_host_integration_core_api_echo_async_nullable_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableMapResponse) response =
      my_host_integration_core_api_echo_async_nullable_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableMap: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableMapResponse) response =
      my_host_integration_core_api_echo_async_nullable_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableMap: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_echo_async_nullable_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAnEnum return_value) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse) response =
      my_host_integration_core_api_echo_async_nullable_enum_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_echo_async_nullable_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiEchoAsyncNullableEnumResponse) response =
      my_host_integration_core_api_echo_async_nullable_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_async_nullable_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.echoAsyncNullableEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_noop(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, void return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterNoopResponse) response =
      my_host_integration_core_api_call_flutter_noop_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_noop_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.callFlutterNoop: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_noop(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterNoopResponse) response =
      my_host_integration_core_api_call_flutter_noop_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_noop_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.callFlutterNoop: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_throw_error(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterThrowErrorResponse) response =
      my_host_integration_core_api_call_flutter_throw_error_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_throw_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterThrowError: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_throw_error(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterThrowErrorResponse) response =
      my_host_integration_core_api_call_flutter_throw_error_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_throw_error_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterThrowError: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_throw_error_from_void(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, void return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse) response =
      my_host_integration_core_api_call_flutter_throw_error_from_void_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_throw_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterThrowErrorFromVoid: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_throw_error_from_void(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse) response =
      my_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_throw_error_from_void_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterThrowErrorFromVoid: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_all_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAllTypes* return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse) response =
      my_host_integration_core_api_call_flutter_echo_all_types_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_types_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoAllTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_all_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoAllTypesResponse) response =
      my_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_types_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoAllTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_all_nullable_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAllNullableTypes* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse) response =
      my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoAllNullableTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse) response =
      my_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_all_nullable_types_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoAllNullableTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAllNullableTypes* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_send_multiple_nullable_types_channel,
          response_handle, response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          my_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_send_multiple_nullable_types_channel,
          response_handle, response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoBoolResponse) response =
      my_host_integration_core_api_call_flutter_echo_bool_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoBoolResponse) response =
      my_host_integration_core_api_call_flutter_echo_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_bool_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoIntResponse) response =
      my_host_integration_core_api_call_flutter_echo_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.callFlutterEchoInt: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoIntResponse) response =
      my_host_integration_core_api_call_flutter_echo_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_int_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.callFlutterEchoInt: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, double return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse) response =
      my_host_integration_core_api_call_flutter_echo_double_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoDoubleResponse) response =
      my_host_integration_core_api_call_flutter_echo_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_double_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoStringResponse) response =
      my_host_integration_core_api_call_flutter_echo_string_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoStringResponse) response =
      my_host_integration_core_api_call_flutter_echo_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_string_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse) response =
      my_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoUint8List: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoUint8ListResponse) response =
      my_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoUint8List: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoListResponse) response =
      my_host_integration_core_api_call_flutter_echo_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoListResponse) response =
      my_host_integration_core_api_call_flutter_echo_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_list_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoMapResponse) response =
      my_host_integration_core_api_call_flutter_echo_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.callFlutterEchoMap: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoMapResponse) response =
      my_host_integration_core_api_call_flutter_echo_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_map_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to HostIntegrationCoreApi.callFlutterEchoMap: "
        "%s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAnEnum return_value) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoEnumResponse) response =
      my_host_integration_core_api_call_flutter_echo_enum_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(MyHostIntegrationCoreApiCallFlutterEchoEnumResponse) response =
      my_host_integration_core_api_call_flutter_echo_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->call_flutter_echo_enum_channel,
                                        response_handle, response->value,
                                        &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_bool_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_bool(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_bool_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableBool: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_int_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableInt: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_int(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableIntResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_int_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableInt: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, double return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_double(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_double_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableDouble: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_string(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableStringResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_string_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableString: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    const uint8_t* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableUint8List: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_uint8_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_uint8_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableUint8List: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_list(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableListResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_list_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableList: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_map_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableMap: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_map(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableMapResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_map_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableMap: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_call_flutter_echo_nullable_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    MyAnEnum return_value) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_enum_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableEnum: %s",
        error->message);
  }
}

void my_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum(
    MyHostIntegrationCoreApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details) {
  g_autoptr(
      MyHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse) response =
      my_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->call_flutter_echo_nullable_enum_channel, response_handle,
          response->value, &error)) {
    g_warning(
        "Failed to send response to "
        "HostIntegrationCoreApi.callFlutterEchoNullableEnum: %s",
        error->message);
  }
}

struct _MyFlutterIntegrationCoreApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
};

G_DEFINE_TYPE(MyFlutterIntegrationCoreApi, my_flutter_integration_core_api,
              G_TYPE_OBJECT)

static void my_flutter_integration_core_api_dispose(GObject* object) {
  MyFlutterIntegrationCoreApi* self = MY_FLUTTER_INTEGRATION_CORE_API(object);
  g_clear_object(&self->messenger);
  G_OBJECT_CLASS(my_flutter_integration_core_api_parent_class)->dispose(object);
}

static void my_flutter_integration_core_api_init(
    MyFlutterIntegrationCoreApi* self) {}

static void my_flutter_integration_core_api_class_init(
    MyFlutterIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_flutter_integration_core_api_dispose;
}

MyFlutterIntegrationCoreApi* my_flutter_integration_core_api_new(
    FlBinaryMessenger* messenger) {
  MyFlutterIntegrationCoreApi* self = MY_FLUTTER_INTEGRATION_CORE_API(
      g_object_new(my_flutter_integration_core_api_get_type(), nullptr));
  self->messenger = g_object_ref(messenger);
  return self;
}

void my_flutter_integration_core_api_noop_async(
    MyFlutterIntegrationCoreApi* object, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {}

gboolean my_flutter_integration_core_api_noop_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_throw_error_async(
    MyFlutterIntegrationCoreApi* object, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {}

gboolean my_flutter_integration_core_api_throw_error_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_throw_error_from_void_async(
    MyFlutterIntegrationCoreApi* object, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {}

gboolean my_flutter_integration_core_api_throw_error_from_void_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_all_types_async(
    MyFlutterIntegrationCoreApi* object, MyAllTypes* everything,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_all_types_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    MyAllTypes** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_all_nullable_types_async(
    MyFlutterIntegrationCoreApi* object, MyAllNullableTypes* everything,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_all_nullable_types_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    MyAllNullableTypes** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_send_multiple_nullable_types_async(
    MyFlutterIntegrationCoreApi* object, gboolean a_nullable_bool,
    int64_t a_nullable_int, const gchar* a_nullable_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_send_multiple_nullable_types_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    MyAllNullableTypes** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_bool_async(
    MyFlutterIntegrationCoreApi* object, gboolean a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_bool_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    gboolean* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_int_async(
    MyFlutterIntegrationCoreApi* object, int64_t an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_int_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    int64_t* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_double_async(
    MyFlutterIntegrationCoreApi* object, double a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_double_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    double* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_string_async(
    MyFlutterIntegrationCoreApi* object, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_string_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    gchar** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_uint8_list_async(
    MyFlutterIntegrationCoreApi* object, const uint8_t* a_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_uint8_list_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    uint8_t** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_list_async(
    MyFlutterIntegrationCoreApi* object, FlValue* a_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_list_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_map_async(
    MyFlutterIntegrationCoreApi* object, FlValue* a_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_map_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_enum_async(
    MyFlutterIntegrationCoreApi* object, MyAnEnum an_enum,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_enum_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    MyAnEnum* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_bool_async(
    MyFlutterIntegrationCoreApi* object, gboolean a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_bool_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    gboolean* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_int_async(
    MyFlutterIntegrationCoreApi* object, int64_t an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_int_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    int64_t* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_double_async(
    MyFlutterIntegrationCoreApi* object, double a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_double_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    double* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_string_async(
    MyFlutterIntegrationCoreApi* object, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_string_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    gchar** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_uint8_list_async(
    MyFlutterIntegrationCoreApi* object, const uint8_t* a_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_uint8_list_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    uint8_t** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_list_async(
    MyFlutterIntegrationCoreApi* object, FlValue* a_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_list_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_map_async(
    MyFlutterIntegrationCoreApi* object, FlValue* a_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_map_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    FlValue** return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_nullable_enum_async(
    MyFlutterIntegrationCoreApi* object, MyAnEnum an_enum,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_nullable_enum_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    MyAnEnum* return_value, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_noop_async_async(
    MyFlutterIntegrationCoreApi* object, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {}

gboolean my_flutter_integration_core_api_noop_async_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result, GError** error) {
  return TRUE;
}

void my_flutter_integration_core_api_echo_async_string_async(
    MyFlutterIntegrationCoreApi* object, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {}

gboolean my_flutter_integration_core_api_echo_async_string_finish(
    MyFlutterIntegrationCoreApi* object, GAsyncResult* result,
    gchar** return_value, GError** error) {
  return TRUE;
}

G_DECLARE_FINAL_TYPE(MyHostTrivialApiCodec, my_host_trivial_api_codec, MY,
                     HOST_TRIVIAL_API_CODEC, FlStandardMessageCodec)

struct _MyHostTrivialApiCodec {
  FlStandardMessageCodec parent_instance;
};

G_DEFINE_TYPE(MyHostTrivialApiCodec, my_host_trivial_api_codec,
              fl_standard_message_codec_get_type())

static gboolean my_host_trivial_api_write_value(FlStandardMessageCodec* codec,
                                                GByteArray* buffer,
                                                FlValue* value,
                                                GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {}
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(my_host_trivial_api_codec_parent_class)
      ->write_value(codec, buffer, value, error);
}

static FlValue* my_host_trivial_api_read_value_of_type(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type,
    GError** error) {
  switch (type) {
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(
                 my_host_trivial_api_codec_parent_class)
          ->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void my_host_trivial_api_codec_init(MyHostTrivialApiCodec* self) {}

static void my_host_trivial_api_codec_class_init(
    MyHostTrivialApiCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value =
      my_host_trivial_api_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type =
      my_host_trivial_api_read_value_of_type;
}

static MyHostTrivialApiCodec* my_host_trivial_api_codec_new() {
  MyHostTrivialApiCodec* self = MY_HOST_TRIVIAL_API_CODEC(
      g_object_new(my_host_trivial_api_codec_get_type(), nullptr));
  return self;
}

struct _MyHostTrivialApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostTrivialApiNoopResponse, my_host_trivial_api_noop_response,
              G_TYPE_OBJECT)

static void my_host_trivial_api_noop_response_dispose(GObject* object) {
  MyHostTrivialApiNoopResponse* self =
      MY_HOST_TRIVIAL_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_trivial_api_noop_response_parent_class)
      ->dispose(object);
}

static void my_host_trivial_api_noop_response_init(
    MyHostTrivialApiNoopResponse* self) {}

static void my_host_trivial_api_noop_response_class_init(
    MyHostTrivialApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_host_trivial_api_noop_response_dispose;
}

MyHostTrivialApiNoopResponse* my_host_trivial_api_noop_response_new(
    void return_value) {
  MyHostTrivialApiNoopResponse* self = MY_HOST_TRIVIAL_API_NOOP_RESPONSE(
      g_object_new(my_host_trivial_api_noop_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

MyHostTrivialApiNoopResponse* my_host_trivial_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostTrivialApiNoopResponse* self = MY_HOST_TRIVIAL_API_NOOP_RESPONSE(
      g_object_new(my_host_trivial_api_noop_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostTrivialApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  const MyHostTrivialApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;

  FlBasicMessageChannel* noop_channel;
};

G_DEFINE_TYPE(MyHostTrivialApi, my_host_trivial_api, G_TYPE_OBJECT)

static void noop_cb(FlBasicMessageChannel* channel, FlValue* message,
                    FlBasicMessageChannelResponseHandle* response_handle,
                    gpointer user_data) {
  MyHostTrivialApi* self = MY_HOST_TRIVIAL_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  g_autoptr(MyHostTrivialApiNoopResponse) response =
      self->vtable->noop(self, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to HostTrivialApi.noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostTrivialApi.noop: %s",
              error->message);
  }
}

static void my_host_trivial_api_dispose(GObject* object) {
  MyHostTrivialApi* self = MY_HOST_TRIVIAL_API(object);
  g_clear_object(&self->messenger);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;

  g_clear_object(&self->noop_channel);
  G_OBJECT_CLASS(my_host_trivial_api_parent_class)->dispose(object);
}

static void my_host_trivial_api_init(MyHostTrivialApi* self) {}

static void my_host_trivial_api_class_init(MyHostTrivialApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_host_trivial_api_dispose;
}

MyHostTrivialApi* my_host_trivial_api_new(FlBinaryMessenger* messenger,
                                          const MyHostTrivialApiVTable* vtable,
                                          gpointer user_data,
                                          GDestroyNotify user_data_free_func) {
  MyHostTrivialApi* self = MY_HOST_TRIVIAL_API(
      g_object_new(my_host_trivial_api_get_type(), nullptr));
  self->messenger = g_object_ref(messenger);
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;

  g_autoptr(MyHostTrivialApiCodec) codec = my_host_trivial_api_codec_new();
  self->noop_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostTrivialApi.noop",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->noop_channel, noop_cb,
                                               self, nullptr);

  return self;
}

G_DECLARE_FINAL_TYPE(MyHostSmallApiCodec, my_host_small_api_codec, MY,
                     HOST_SMALL_API_CODEC, FlStandardMessageCodec)

struct _MyHostSmallApiCodec {
  FlStandardMessageCodec parent_instance;
};

G_DEFINE_TYPE(MyHostSmallApiCodec, my_host_small_api_codec,
              fl_standard_message_codec_get_type())

static gboolean my_host_small_api_write_value(FlStandardMessageCodec* codec,
                                              GByteArray* buffer,
                                              FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {}
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(my_host_small_api_codec_parent_class)
      ->write_value(codec, buffer, value, error);
}

static FlValue* my_host_small_api_read_value_of_type(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type,
    GError** error) {
  switch (type) {
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(
                 my_host_small_api_codec_parent_class)
          ->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void my_host_small_api_codec_init(MyHostSmallApiCodec* self) {}

static void my_host_small_api_codec_class_init(
    MyHostSmallApiCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value =
      my_host_small_api_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type =
      my_host_small_api_read_value_of_type;
}

static MyHostSmallApiCodec* my_host_small_api_codec_new() {
  MyHostSmallApiCodec* self = MY_HOST_SMALL_API_CODEC(
      g_object_new(my_host_small_api_codec_get_type(), nullptr));
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostSmallApiEchoResponse,
                     my_host_small_api_echo_response, MY,
                     HOST_SMALL_API_ECHO_RESPONSE, GObject)

struct _MyHostSmallApiEchoResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostSmallApiEchoResponse, my_host_small_api_echo_response,
              G_TYPE_OBJECT)

static void my_host_small_api_echo_response_dispose(GObject* object) {
  MyHostSmallApiEchoResponse* self = MY_HOST_SMALL_API_ECHO_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_small_api_echo_response_parent_class)->dispose(object);
}

static void my_host_small_api_echo_response_init(
    MyHostSmallApiEchoResponse* self) {}

static void my_host_small_api_echo_response_class_init(
    MyHostSmallApiEchoResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_host_small_api_echo_response_dispose;
}

static MyHostSmallApiEchoResponse* my_host_small_api_echo_response_new(
    const gchar* return_value) {
  MyHostSmallApiEchoResponse* self = MY_HOST_SMALL_API_ECHO_RESPONSE(
      g_object_new(my_host_small_api_echo_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static MyHostSmallApiEchoResponse* my_host_small_api_echo_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  MyHostSmallApiEchoResponse* self = MY_HOST_SMALL_API_ECHO_RESPONSE(
      g_object_new(my_host_small_api_echo_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

G_DECLARE_FINAL_TYPE(MyHostSmallApiVoidVoidResponse,
                     my_host_small_api_void_void_response, MY,
                     HOST_SMALL_API_VOID_VOID_RESPONSE, GObject)

struct _MyHostSmallApiVoidVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(MyHostSmallApiVoidVoidResponse,
              my_host_small_api_void_void_response, G_TYPE_OBJECT)

static void my_host_small_api_void_void_response_dispose(GObject* object) {
  MyHostSmallApiVoidVoidResponse* self =
      MY_HOST_SMALL_API_VOID_VOID_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(my_host_small_api_void_void_response_parent_class)
      ->dispose(object);
}

static void my_host_small_api_void_void_response_init(
    MyHostSmallApiVoidVoidResponse* self) {}

static void my_host_small_api_void_void_response_class_init(
    MyHostSmallApiVoidVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_host_small_api_void_void_response_dispose;
}

static MyHostSmallApiVoidVoidResponse* my_host_small_api_void_void_response_new(
    void return_value) {
  MyHostSmallApiVoidVoidResponse* self = MY_HOST_SMALL_API_VOID_VOID_RESPONSE(
      g_object_new(my_host_small_api_void_void_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static MyHostSmallApiVoidVoidResponse*
my_host_small_api_void_void_response_new_error(const gchar* code,
                                               const gchar* message,
                                               FlValue* details) {
  MyHostSmallApiVoidVoidResponse* self = MY_HOST_SMALL_API_VOID_VOID_RESPONSE(
      g_object_new(my_host_small_api_void_void_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message));
  fl_value_append(self->value, details);
  return self;
}

struct _MyHostSmallApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  const MyHostSmallApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;

  FlBasicMessageChannel* echo_channel;
  FlBasicMessageChannel* void_void_channel;
};

G_DEFINE_TYPE(MyHostSmallApi, my_host_small_api, G_TYPE_OBJECT)

static void echo_cb(FlBasicMessageChannel* channel, FlValue* message,
                    FlBasicMessageChannelResponseHandle* response_handle,
                    gpointer user_data) {
  MyHostSmallApi* self = MY_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_LIST ||
      fl_value_get_length(message) != 1 ||
      fl_value_get_type(fl_value_get_list_value(message, 0)) !=
          FL_VALUE_TYPE_STRING) {
    return;
  }

  self->vtable->echo(self,
                     fl_value_get_string(fl_value_get_list_value(message, 0)),
                     response_handle, self->user_data);
}

static void void_void_cb(FlBasicMessageChannel* channel, FlValue* message,
                         FlBasicMessageChannelResponseHandle* response_handle,
                         gpointer user_data) {
  MyHostSmallApi* self = MY_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->void_void == nullptr) {
    return;
  }

  if (fl_value_get_type(message) != FL_VALUE_TYPE_NULL) {
    return;
  }

  self->vtable->void_void(self, response_handle, self->user_data);
}

static void my_host_small_api_dispose(GObject* object) {
  MyHostSmallApi* self = MY_HOST_SMALL_API(object);
  g_clear_object(&self->messenger);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;

  g_clear_object(&self->echo_channel);
  g_clear_object(&self->void_void_channel);
  G_OBJECT_CLASS(my_host_small_api_parent_class)->dispose(object);
}

static void my_host_small_api_init(MyHostSmallApi* self) {}

static void my_host_small_api_class_init(MyHostSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_host_small_api_dispose;
}

MyHostSmallApi* my_host_small_api_new(FlBinaryMessenger* messenger,
                                      const MyHostSmallApiVTable* vtable,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func) {
  MyHostSmallApi* self =
      MY_HOST_SMALL_API(g_object_new(my_host_small_api_get_type(), nullptr));
  self->messenger = g_object_ref(messenger);
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;

  g_autoptr(MyHostSmallApiCodec) codec = my_host_small_api_codec_new();
  self->echo_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.echo",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->echo_channel, echo_cb,
                                               self, nullptr);
  self->void_void_channel = fl_basic_message_channel_new(
      messenger,
      "dev.flutter.pigeon.pigeon_integration_tests.HostSmallApi.voidVoid",
      FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(self->void_void_channel,
                                               void_void_cb, self, nullptr);

  return self;
}

void my_host_small_api_respond_echo(
    MyHostSmallApi* self, FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(MyHostSmallApiEchoResponse) response =
      my_host_small_api_echo_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostSmallApi.echo: %s",
              error->message);
  }
}

void my_host_small_api_respond_error_echo(
    MyHostSmallApi* self, FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MyHostSmallApiEchoResponse) response =
      my_host_small_api_echo_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(self->echo_channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to HostSmallApi.echo: %s",
              error->message);
  }
}

void my_host_small_api_respond_void_void(
    MyHostSmallApi* self, FlBasicMessageChannelResponseHandle* response_handle,
    void return_value) {
  g_autoptr(MyHostSmallApiVoidVoidResponse) response =
      my_host_small_api_void_void_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->void_void_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to HostSmallApi.voidVoid: %s",
              error->message);
  }
}

void my_host_small_api_respond_error_void_void(
    MyHostSmallApi* self, FlBasicMessageChannelResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(MyHostSmallApiVoidVoidResponse) response =
      my_host_small_api_void_void_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(
          self->void_void_channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to HostSmallApi.voidVoid: %s",
              error->message);
  }
}

struct _MyFlutterSmallApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
};

G_DEFINE_TYPE(MyFlutterSmallApi, my_flutter_small_api, G_TYPE_OBJECT)

static void my_flutter_small_api_dispose(GObject* object) {
  MyFlutterSmallApi* self = MY_FLUTTER_SMALL_API(object);
  g_clear_object(&self->messenger);
  G_OBJECT_CLASS(my_flutter_small_api_parent_class)->dispose(object);
}

static void my_flutter_small_api_init(MyFlutterSmallApi* self) {}

static void my_flutter_small_api_class_init(MyFlutterSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = my_flutter_small_api_dispose;
}

MyFlutterSmallApi* my_flutter_small_api_new(FlBinaryMessenger* messenger) {
  MyFlutterSmallApi* self = MY_FLUTTER_SMALL_API(
      g_object_new(my_flutter_small_api_get_type(), nullptr));
  self->messenger = g_object_ref(messenger);
  return self;
}

void my_flutter_small_api_echo_wrapped_list_async(MyFlutterSmallApi* object,
                                                  MyTestMessage* msg,
                                                  GCancellable* cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data) {}

gboolean my_flutter_small_api_echo_wrapped_list_finish(
    MyFlutterSmallApi* object, GAsyncResult* result,
    MyTestMessage** return_value, GError** error) {
  return TRUE;
}

void my_flutter_small_api_echo_string_async(MyFlutterSmallApi* object,
                                            const gchar* a_string,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer user_data) {}

gboolean my_flutter_small_api_echo_string_finish(MyFlutterSmallApi* object,
                                                 GAsyncResult* result,
                                                 gchar** return_value,
                                                 GError** error) {
  return TRUE;
}
